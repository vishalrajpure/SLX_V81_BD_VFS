<%@ Control Language="C#" ClassName="AddEditLink" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="33%" />
            <col width="33%" />
     <tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft">
   <asp:Label ID="txtLinkType_lbl" AssociatedControlID="txtLinkType" runat="server" Text="<%$ resources: txtLinkType.Caption %>" ></asp:Label>
 </div>   
   <div  class="twocoltextcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="txtLinkType" ReadOnly="true" PickListName="Integration Link Type" MaxLength="64"  />
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtEndPointURL_lbl" AssociatedControlID="txtEndPointURL" runat="server" Text="<%$ resources: txtEndPointURL.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtEndPointURL"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtDisplayName_lbl" AssociatedControlID="txtDisplayName" runat="server" Text="<%$ resources: txtDisplayName.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtDisplayName"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtUserName_lbl" AssociatedControlID="txtUserName" runat="server" Text="<%$ resources: txtUserName.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtUserName"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtPassword_lbl" AssociatedControlID="txtPassword" runat="server" Text="<%$ resources: txtPassword.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtPassword"  dojoType="Sage.UI.Controls.TextBox" TextMode="Password"  />
  </div>

      </td>
            </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="ctrlstTest" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="btnTest0"
 Text="<%$ resources: btnTest0.Caption %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtStatus_lbl" AssociatedControlID="txtStatus" runat="server" Text="<%$ resources: txtStatus.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtStatus" ReadOnly="true"  Rows="2" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
            </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="ctrlstButtons" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="cmdOK"
 Text="<%$ resources: cmdOK.Caption %>" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="cmdCancel"
 Text="<%$ resources: cmdCancel.Caption %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="AddEditLink_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=AddEditLink&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkAddEditLinkHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="AddEditLink" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IAppIdMapping); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsSchemaDiffs;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsSchemaDiffs
{ 
  get 
  {
    if (_dtsSchemaDiffs == null)
    {
             _dtsSchemaDiffs = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Platform.ComponentModel.ComponentView), 
	    EntityType                     ,"GetSchemaDifferences", System.Reflection.MemberTypes.Method);
            	   	}
 	return _dtsSchemaDiffs;
  }
}

void dtsSchemaDiffs_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsSchemaDiffs.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsSchemaDiffs);
   }
}

 



 

protected override void OnAddEntityBindings() {
                 // txtLinkType.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtLinkTypePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Integration.LinkType", txtLinkType, "PickListValue");
        BindingSource.Bindings.Add(txtLinkTypePickListValueBinding);
                    // txtEndPointURL.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtEndPointURLTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("EndPointURL", txtEndPointURL, "Text");
        BindingSource.Bindings.Add(txtEndPointURLTextBinding);
                    // txtDisplayName.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDisplayNameTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Name", txtDisplayName, "Text");
        BindingSource.Bindings.Add(txtDisplayNameTextBinding);
                    // txtUserName.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtUserNameTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("UserName", txtUserName, "Text");
        BindingSource.Bindings.Add(txtUserNameTextBinding);
                         
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsSchemaDiffs_OnCurrentEntitySet);
    
}
                                                                             
protected void btnTest0_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IAppIdMapping appIdMapping = BindingSource.Current as Sage.Entity.Interfaces.IAppIdMapping;
appIdMapping.EncryptAccountingSystemPassword(txtPassword.Text);
txtPassword.Attributes["value"] = txtPassword.Text;
appIdMapping.ValidateEndPoint();
txtStatus.Text = appIdMapping.TestAccountingFeed();

}
protected void cmdOK_ClickAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("AddEditLink.cmdOK_OnClick", methodArgs);
  Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 btnTest0.Click += new EventHandler(btnTest0_ClickAction);
cmdOK.Click += new EventHandler(cmdOK_ClickAction);
cmdOK.Click += new EventHandler(DialogService.CloseEventHappened);
cmdCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
var appIdMapping = BindingSource.Current as Sage.Entity.Interfaces.IAppIdMapping;
appIdMapping.Integration = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IIntegration>(page.EntityContext.EntityID);
txtStatus.Text = String.Empty;
txtPassword.Attributes.Add("value", Sage.SalesLogix.SLXEncryption.Decrypt(appIdMapping.Password, "SDATAIC"));

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(cmdOK);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (dtsSchemaDiffs.SourceObject == null) { dtsSchemaDiffs.SourceObject = BindingSource.Current; }
if (dtsSchemaDiffs.SourceObject == null) { RegisterBindingsWithClient(dtsSchemaDiffs); }
dtsSchemaDiffs.Bind();

ClientBindingMgr.RegisterDialogCancelButton(cmdCancel);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new AddEditLinkAdapter(this)); }
}

public class AddEditLinkAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAddEditLink
{
    public AddEditLinkAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IPickListControl _txtLinkType;
    public  Sage.Platform.Controls.IPickListControl txtLinkType
    {
        get { return FindControl(ref _txtLinkType, "txtLinkType"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtEndPointURL;
    public  Sage.Platform.Controls.ITextBoxControl txtEndPointURL
    {
        get { return FindControl(ref _txtEndPointURL, "txtEndPointURL"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtDisplayName;
    public  Sage.Platform.Controls.ITextBoxControl txtDisplayName
    {
        get { return FindControl(ref _txtDisplayName, "txtDisplayName"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtUserName;
    public  Sage.Platform.Controls.ITextBoxControl txtUserName
    {
        get { return FindControl(ref _txtUserName, "txtUserName"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtPassword;
    public  Sage.Platform.Controls.ITextBoxControl txtPassword
    {
        get { return FindControl(ref _txtPassword, "txtPassword"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtStatus;
    public  Sage.Platform.Controls.ITextBoxControl txtStatus
    {
        get { return FindControl(ref _txtStatus, "txtStatus"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlstTest;
    public  Sage.Platform.Controls.IControlsListControl ctrlstTest
    {
        get { return FindControl(ref _ctrlstTest, "ctrlstTest"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnTest0;
    public  Sage.Platform.Controls.IButtonControl btnTest0
    {
        get { return FindControl(ref _btnTest0, "btnTest0"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlstButtons;
    public  Sage.Platform.Controls.IControlsListControl ctrlstButtons
    {
        get { return FindControl(ref _ctrlstButtons, "ctrlstButtons"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdOK;
    public  Sage.Platform.Controls.IButtonControl cmdOK
    {
        get { return FindControl(ref _cmdOK, "cmdOK"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdCancel;
    public  Sage.Platform.Controls.IButtonControl cmdCancel
    {
        get { return FindControl(ref _cmdCancel, "cmdCancel"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dtsSchemaDiffs;
    public  Sage.Platform.Controls.IDataSourceControl dtsSchemaDiffs
    {
        get { return FindControl(ref _dtsSchemaDiffs, "dtsSchemaDiffs"); }
    }

    public  void cmdOK_OnClick(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("AddEditLink.cmdOK_OnClick", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
