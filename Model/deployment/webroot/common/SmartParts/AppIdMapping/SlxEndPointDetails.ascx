<%@ Control Language="C#" ClassName="SlxEndPointDetails" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtSlxEndPoint_lbl" AssociatedControlID="txtSlxEndPoint" runat="server" Text="<%$ resources: txtSlxEndPoint.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtSlxEndPoint" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" MaxLength="256"  />
  </div>

      </td>
            </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkboxRight">

  <SalesLogix:SLXCheckBox runat="server" ID="chkUseSSL"  Text="<%$ resources: chkUseSSL.Caption %>"  CssClass=""
LabelPlacement="left" AutoPostBack="true"  />
</div>
      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtServer_lbl" AssociatedControlID="txtServer" runat="server" Text="<%$ resources: txtServer.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtServer"  dojoType="Sage.UI.Controls.TextBox" AutoPostBack="true"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtPort_lbl" AssociatedControlID="txtPort" runat="server" Text="<%$ resources: txtPort.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtPort"  dojoType="Sage.UI.Controls.TextBox" AutoPostBack="true"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSDataPortal_lbl" AssociatedControlID="txtSDataPortal" runat="server" Text="<%$ resources: txtSDataPortal.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSDataPortal"  dojoType="Sage.UI.Controls.TextBox" AutoPostBack="true"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  colspan="2" >
  <hr />
 

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtUserName_lbl" AssociatedControlID="txtUserName" runat="server" Text="<%$ resources: txtUserName.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtUserName"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtPassword_lbl" AssociatedControlID="txtPassword" runat="server" Text="<%$ resources: txtPassword.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtPassword"  dojoType="Sage.UI.Controls.TextBox" MaxLength="128" TextMode="Password"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtName_lbl" AssociatedControlID="txtName" runat="server" Text="<%$ resources: txtName.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtName"  dojoType="Sage.UI.Controls.TextBox" MaxLength="128"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  colspan="2" >
  <hr />
 

      </td>
            </tr>
<tr>
            <td  >
<asp:Panel runat="server" ID="ctrlsTest" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="btnTest"
 Text="<%$ resources: btnTest.Caption %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
                <td></td>
      </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtStatus_lbl" AssociatedControlID="txtStatus" runat="server" Text="<%$ resources: txtStatus.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtStatus" ReadOnly="true"  Rows="2" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
            </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="SlxEndPointDetails_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="btnSave"
 AlternateText="<%$ resources: btnSave.Caption %>"  ToolTip="<%$ resources: btnSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
    <asp:ImageButton runat="server" ID="btnUpdateSyncDigest"
 ToolTip="<%$ resources: btnUpdateSyncDigest.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=refresh"  />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=SlxEndPointDetails&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkSlxEndPointDetailsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="SlxEndPointDetails" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IAppIdMapping); }
}

 

protected override void OnAddEntityBindings() {
                 // txtSlxEndPoint.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSlxEndPointTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("EndPointURL", txtSlxEndPoint, "Text");
        BindingSource.Bindings.Add(txtSlxEndPointTextBinding);
                                   // txtUserName.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtUserNameTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("UserName", txtUserName, "Text");
        BindingSource.Bindings.Add(txtUserNameTextBinding);
                       // txtName.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtNameTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Name", txtName, "Text");
        BindingSource.Bindings.Add(txtNameTextBinding);
                
   
        }
                                                                                           
protected void chkUseSSL_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IAppIdMapping appIdMapping = BindingSource.Current as Sage.Entity.Interfaces.IAppIdMapping;
txtSlxEndPoint.Text = chkUseSSL.Checked ? txtSlxEndPoint.Text.Replace("http", "https") : txtSlxEndPoint.Text.Replace("https", "http");
appIdMapping.EndPointURL = txtSlxEndPoint.Text;

}
protected void txtServer_ChangeAction(object sender, EventArgs e) {
string[] urlParts = txtSlxEndPoint.Text.Split(':');
string part = urlParts[1];
string server = part.Replace("//", string.Empty);
if (urlParts.GetLength(0) == 3)
{
    txtSlxEndPoint.Text = txtSlxEndPoint.Text.Replace(server, txtServer.Text);
}
else if (urlParts.GetLength(0) == 2)
{
    urlParts = server.Split('/');
    txtSlxEndPoint.Text = txtSlxEndPoint.Text.Replace(urlParts[0], txtServer.Text);
}
Sage.Entity.Interfaces.IAppIdMapping appIdMapping = BindingSource.Current as Sage.Entity.Interfaces.IAppIdMapping;
appIdMapping.EndPointURL = txtSlxEndPoint.Text;

}
protected void txtPort_ChangeAction(object sender, EventArgs e) {
string[] urlParts = txtSlxEndPoint.Text.Split(':');
string replaceText = string.Empty;
string port = txtPort.Text;
if (urlParts.GetLength(0) == 3)
{
    if (string.IsNullOrEmpty(txtPort.Text))
    {
        string server = urlParts[1].Replace("//", string.Empty);
        replaceText = string.Format("{0}:{1}", server, urlParts[2].Split('/')[0]);
        port = string.Format("{0}", server);
    }
    else
    {
        replaceText = urlParts[2].Split('/')[0];
    }
}
else if (urlParts.GetLength(0) == 2)
{
    string server = urlParts[1].Replace("//", string.Empty).Split('/')[0];
    replaceText = server;
    port = string.Format("{0}:{1}", server, txtPort.Text);
}
Sage.Entity.Interfaces.IAppIdMapping appIdMapping = BindingSource.Current as Sage.Entity.Interfaces.IAppIdMapping;
txtSlxEndPoint.Text = txtSlxEndPoint.Text.Replace(replaceText, port);
appIdMapping.EndPointURL = txtSlxEndPoint.Text;

}
protected void txtSDataPortal_ChangeAction(object sender, EventArgs e) {
string[] urlParts = txtSlxEndPoint.Text.Split(':');
string portal = "sdata";
if (urlParts.GetLength(0) == 3)
{
    urlParts = urlParts[2].Split('/');
    portal = urlParts[1];
}
else if (urlParts.GetLength(0) == 2)
{
    urlParts = urlParts[1].Replace("//", string.Empty).Split('/');
    portal = urlParts[1];
}
Sage.Entity.Interfaces.IAppIdMapping appIdMapping = BindingSource.Current as Sage.Entity.Interfaces.IAppIdMapping;
txtSlxEndPoint.Text = txtSlxEndPoint.Text.Replace(portal, txtSDataPortal.Text);
appIdMapping.EndPointURL = txtSlxEndPoint.Text;

}
protected void btnTest_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IAppIdMapping appIdMapping = BindingSource.Current as Sage.Entity.Interfaces.IAppIdMapping;
if (appIdMapping.EndPointURL.Contains(":<port>"))
{
    appIdMapping.EndPointURL = appIdMapping.EndPointURL.Replace(":<port>", string.Empty);
}
appIdMapping.EncryptAccountingSystemPassword(txtPassword.Text);
txtPassword.Attributes["value"] = txtPassword.Text;
appIdMapping.ValidateEndPoint();
txtStatus.Text = appIdMapping.TestAccountingFeed();

}
protected void btnSave_ClickAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("SlxEndPointDetails.btnSave_OnClick", methodArgs);

}
protected void btnUpdateSyncDigest_ClickAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IAppIdMapping>("AppIdMapping.ValidateSyncDigestResources", objarray);

  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 chkUseSSL.CheckedChanged += new EventHandler(chkUseSSL_ChangeAction);
txtServer.TextChanged += new EventHandler(txtServer_ChangeAction);
txtPort.TextChanged += new EventHandler(txtPort_ChangeAction);
txtSDataPortal.TextChanged += new EventHandler(txtSDataPortal_ChangeAction);
btnTest.Click += new EventHandler(btnTest_ClickAction);
btnSave.Click += new ImageClickEventHandler(btnSave_ClickAction);
btnSave.Click += new ImageClickEventHandler(DialogService.CloseEventHappened);
btnSave.Click += new ImageClickEventHandler(Refresh);
btnUpdateSyncDigest.Click += new ImageClickEventHandler(btnUpdateSyncDigest_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.IAppIdMapping appIdMapping = BindingSource.Current as Sage.Entity.Interfaces.IAppIdMapping;
txtStatus.Text = String.Empty;
txtPassword.Attributes.Add("value", Sage.SalesLogix.SLXEncryption.Decrypt(appIdMapping.Password, "SDATAIC"));

}
protected void quickformload1(object sender, EventArgs e) {
if (String.IsNullOrEmpty(txtSlxEndPoint.Text))
{
    txtSlxEndPoint.Text = "http://<server>:<port>/sdata/slx/gcrm/-/";
}
chkUseSSL.Checked = txtSlxEndPoint.Text.StartsWith("https");
string[] urlParts = txtSlxEndPoint.Text.Split(':');
string part = urlParts[1];
string server = part.Replace("//", string.Empty);
if (urlParts.GetLength(0) == 3)
{
    txtServer.Text = server.Contains("<server>") ? string.Empty : server;
    urlParts = urlParts[2].Split('/');
    string port = urlParts[0];
    txtPort.Text = port.Contains("<port>") ? string.Empty : port;

    txtSDataPortal.Text = urlParts[1];
}
//port not specified, default port will be used
else if (urlParts.GetLength(0) == 2)
{
    urlParts = server.Split('/');
    txtServer.Text = server.Contains("<server>") ? string.Empty : urlParts[0];
    txtSDataPortal.Text = urlParts[1];
}

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(btnSave);

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
quickformload1(this, EventArgs.Empty);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new SlxEndPointDetailsAdapter(this)); }
}

public class SlxEndPointDetailsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ISlxEndPointDetails
{
    public SlxEndPointDetailsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ITextBoxControl _txtSlxEndPoint;
    public  Sage.Platform.Controls.ITextBoxControl txtSlxEndPoint
    {
        get { return FindControl(ref _txtSlxEndPoint, "txtSlxEndPoint"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkUseSSL;
    public  Sage.Platform.Controls.ICheckBoxControl chkUseSSL
    {
        get { return FindControl(ref _chkUseSSL, "chkUseSSL"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtServer;
    public  Sage.Platform.Controls.ITextBoxControl txtServer
    {
        get { return FindControl(ref _txtServer, "txtServer"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtPort;
    public  Sage.Platform.Controls.ITextBoxControl txtPort
    {
        get { return FindControl(ref _txtPort, "txtPort"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtSDataPortal;
    public  Sage.Platform.Controls.ITextBoxControl txtSDataPortal
    {
        get { return FindControl(ref _txtSDataPortal, "txtSDataPortal"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtUserName;
    public  Sage.Platform.Controls.ITextBoxControl txtUserName
    {
        get { return FindControl(ref _txtUserName, "txtUserName"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtPassword;
    public  Sage.Platform.Controls.ITextBoxControl txtPassword
    {
        get { return FindControl(ref _txtPassword, "txtPassword"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtName;
    public  Sage.Platform.Controls.ITextBoxControl txtName
    {
        get { return FindControl(ref _txtName, "txtName"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlsTest;
    public  Sage.Platform.Controls.IControlsListControl ctrlsTest
    {
        get { return FindControl(ref _ctrlsTest, "ctrlsTest"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnTest;
    public  Sage.Platform.Controls.IButtonControl btnTest
    {
        get { return FindControl(ref _btnTest, "btnTest"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtStatus;
    public  Sage.Platform.Controls.ITextBoxControl txtStatus
    {
        get { return FindControl(ref _txtStatus, "txtStatus"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnSave;
    public  Sage.Platform.Controls.IButtonControl btnSave
    {
        get { return FindControl(ref _btnSave, "btnSave"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnUpdateSyncDigest;
    public  Sage.Platform.Controls.IButtonControl btnUpdateSyncDigest
    {
        get { return FindControl(ref _btnUpdateSyncDigest, "btnUpdateSyncDigest"); }
    }

    public  void btnSave_OnClick(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("SlxEndPointDetails.btnSave_OnClick", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
