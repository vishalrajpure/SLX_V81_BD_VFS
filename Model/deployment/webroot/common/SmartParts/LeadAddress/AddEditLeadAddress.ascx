<%@ Control Language="C#" ClassName="AddEditLeadAddress" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="33%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtDescription_lbl" AssociatedControlID="txtDescription" runat="server" Text="<%$ resources: txtDescription.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="txtDescription" PickListName="Address Description (Account)" MustExistInList="false" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkboxRight">

  <SalesLogix:SLXCheckBox runat="server" ID="chkIsPrimary"  Text="<%$ resources: chkIsPrimary.Caption %>"  CssClass=""
LabelPlacement="left"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkboxRight">

  <SalesLogix:SLXCheckBox runat="server" ID="chkIsMailing"  Text="<%$ resources: chkIsMailing.Caption %>"  CssClass=""
LabelPlacement="left"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtAddress1_lbl" AssociatedControlID="txtAddress1" runat="server" Text="<%$ resources: txtAddress1.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtAddress1"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtAddress2_lbl" AssociatedControlID="txtAddress2" runat="server" Text="<%$ resources: txtAddress2.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtAddress2"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtAddress3_lbl" AssociatedControlID="txtAddress3" runat="server" Text="<%$ resources: txtAddress3.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtAddress3"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklCity_lbl" AssociatedControlID="pklCity" runat="server" Text="<%$ resources: pklCity.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklCity" PickListName="City" MustExistInList="false" MaxLength="32"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklState_lbl" AssociatedControlID="pklState" runat="server" Text="<%$ resources: pklState.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklState" PickListName="State" MustExistInList="false" MaxLength="32"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtPostalCode_lbl" AssociatedControlID="txtPostalCode" runat="server" Text="<%$ resources: txtPostalCode.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtPostalCode"  dojoType="Sage.UI.Controls.TextBox" MaxLength="24" AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklCountry_lbl" AssociatedControlID="pklCountry" runat="server" Text="<%$ resources: pklCountry.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklCountry" PickListName="Country" MustExistInList="false" MaxLength="32"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSalutation_lbl" AssociatedControlID="txtSalutation" runat="server" Text="<%$ resources: txtSalutation.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSalutation"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtLatitute_lbl" AssociatedControlID="txtLatitute" runat="server" Text="<%$ resources: txtLatitute.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="txtLatitute"
FormatType="Decimal" Strict="False" 
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtLongitude_lbl" AssociatedControlID="txtLongitude" runat="server" Text="<%$ resources: txtLongitude.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="txtLongitude"
FormatType="Decimal" Strict="False" 
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
<asp:Panel runat="server" ID="QFControlsList" CssClass="controlslist "
>
   <asp:Button runat="server" ID="btnOk"
 Text="<%$ resources: btnOk.Caption %>"  />
   
   <asp:Button runat="server" ID="btnCancel"
 Text="<%$ resources: btnCancel.Caption %>"  />
 
   <asp:Button runat="server" ID="btnGetLatLong"
 Text="<%$ resources: btnGetLatLong.Caption %>" Visible="false"  />
 
</asp:Panel>
      </td>
      </tr>
<tr>
            <td  >
 <div class="slxlabel"><asp:Label runat="server" ID="lblError"  />
</div>
      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="AddEditLeadAddress_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=AddEditLeadAddress&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkAddEditLeadAddressHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="AddEditLeadAddress" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ILeadAddress); }
}

 

protected override void OnAddEntityBindings() {
                 // txtDescription.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDescriptionPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Description", txtDescription, "PickListValue");
        BindingSource.Bindings.Add(txtDescriptionPickListValueBinding);
                    // chkIsPrimary.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkIsPrimaryCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("IsPrimary", chkIsPrimary, "Checked");
        BindingSource.Bindings.Add(chkIsPrimaryCheckedBinding);
                    // chkIsMailing.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkIsMailingCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("IsMailing", chkIsMailing, "Checked");
        BindingSource.Bindings.Add(chkIsMailingCheckedBinding);
                    // txtAddress1.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddress1TextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address1", txtAddress1, "Text");
        BindingSource.Bindings.Add(txtAddress1TextBinding);
                    // txtAddress2.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddress2TextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address2", txtAddress2, "Text");
        BindingSource.Bindings.Add(txtAddress2TextBinding);
                    // txtAddress3.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddress3TextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address3", txtAddress3, "Text");
        BindingSource.Bindings.Add(txtAddress3TextBinding);
                    // pklCity.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklCityPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("City", pklCity, "PickListValue");
        BindingSource.Bindings.Add(pklCityPickListValueBinding);
                    // pklState.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklStatePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("State", pklState, "PickListValue");
        BindingSource.Bindings.Add(pklStatePickListValueBinding);
                    // txtPostalCode.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtPostalCodeTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("PostalCode", txtPostalCode, "Text");
        BindingSource.Bindings.Add(txtPostalCodeTextBinding);
                    // pklCountry.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklCountryPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Country", pklCountry, "PickListValue");
        BindingSource.Bindings.Add(pklCountryPickListValueBinding);
                    // txtSalutation.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSalutationTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Salutation", txtSalutation, "Text");
        BindingSource.Bindings.Add(txtSalutationTextBinding);
                    // txtLatitute.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtLatituteTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Latitude", txtLatitute, "Text");
        BindingSource.Bindings.Add(txtLatituteTextBinding);
                    // txtLongitude.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtLongitudeTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Logitude", txtLongitude, "Text");
        BindingSource.Bindings.Add(txtLongitudeTextBinding);
                   
   
}
                                                                                                                              
protected void txtPostalCode_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ILeadAddress curAdd = this.BindingSource.Current as Sage.Entity.Interfaces.ILeadAddress;
if (txtPostalCode.Text != "")
{
    string qry = "select CPINCODE from VWPINCODEMASTER where CPINCODE ='" + txtPostalCode.Text + "'";
    Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
    System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
    System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
    System.Data.DataTable dt = new System.Data.DataTable();
    dataAdapterObj.Fill(dt);
    if (dt.Rows.Count <= 0)
    {
		lblError.Text = "Pincode does not Exists in Pincode Masters";
		lblError.ForeColor = System.Drawing.Color.Red;
		//DialogService.ShowMessage("Pincode does not Exists in Pincode Masters");
		//return;
    }
}

}
protected void btnOk_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.ILeadAddress _entity = BindingSource.Current as Sage.Entity.Interfaces.ILeadAddress;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

  
}
protected void btnGetLatLong_ClickAction(object sender, EventArgs e) {

Sage.Entity.Interfaces.ILeadAddress curAdd = this.BindingSource.Current as Sage.Entity.Interfaces.ILeadAddress;
if (txtAddress1.Text != "")
{
    string addr = string.Empty;

    if (!string.IsNullOrEmpty(txtAddress1.Text))
        addr += txtAddress1.Text + ", ";

    if (!string.IsNullOrEmpty(pklCity.PickListValue))
        addr += pklCity.PickListValue + ", ";

    if (!string.IsNullOrEmpty(pklState.PickListValue))
        addr += pklState.PickListValue + ", ";

    if (!string.IsNullOrEmpty(txtPostalCode.Text))
        addr += txtPostalCode.Text + ", ";

    if (!string.IsNullOrEmpty(pklCountry.PickListValue))
        addr += pklCountry.PickListValue + ", ";


    string url = "http://maps.google.com/maps/api/geocode/xml?address=" + addr + "&sensor=false";
    System.Net.WebRequest request = System.Net.WebRequest.Create(url);
    using (System.Net.WebResponse response = (System.Net.HttpWebResponse)request.GetResponse())
    {
        using (System.IO.StreamReader reader = new System.IO.StreamReader(response.GetResponseStream(), System.Text.Encoding.UTF8))
        {
            System.Data.DataSet dsResult = new System.Data.DataSet();
            dsResult.ReadXml(reader);
            System.Data.DataTable dtCoordinates = new System.Data.DataTable();

            dtCoordinates.Columns.AddRange(new System.Data.DataColumn[4] { new System.Data.DataColumn("Id", typeof(int)),
                new System.Data.DataColumn("Address", typeof(string)),
                new System.Data.DataColumn("Latitude",typeof(string)),
                new System.Data.DataColumn("Longitude",typeof(string)) });
            foreach (System.Data.DataRow row in dsResult.Tables["result"].Rows)
            {
                string geometry_id = dsResult.Tables["geometry"].Select("result_id = " + row["result_id"].ToString())[0]["geometry_id"].ToString();
                System.Data.DataRow location = dsResult.Tables["location"].Select("geometry_id = " + geometry_id)[0];
                dtCoordinates.Rows.Add(row["result_id"], row["formatted_address"], location["lat"], location["lng"]);
            }
            if (dtCoordinates.Rows.Count > 0)
            {
                curAdd.Latitude = dtCoordinates.Rows[0]["Latitude"].ToString();
                curAdd.Logitude = dtCoordinates.Rows[0]["Longitude"].ToString();
                txtLatitute.Text = dtCoordinates.Rows[0]["Latitude"].ToString();
                txtLongitude.Text = dtCoordinates.Rows[0]["Longitude"].ToString();
                /*if (ViewState["parentEntityID"] != null)
                {           
                     Sage.Entity.Interfaces.ILead objlead = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILead>(ViewState["parentEntityID"].ToString());
                     if (objlead != null)
                     {
                         Sage.Entity.Interfaces.ILeadAddress objadd = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadAddress>(objlead.Address.Id.ToString());
                         if (objadd != null)
                         {
                             objadd.Latitude = curAdd.Latitude;
                             objadd.Logitude = curAdd.Logitude;
                             objadd.Save();
                         }
                     }
                }*/
            }
        }
    }
}        
 		

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 txtPostalCode.TextChanged += new EventHandler(txtPostalCode_ChangeAction);
btnOk.Click += new EventHandler(btnOk_ClickAction);
btnOk.Click += new EventHandler(DialogService.CloseEventHappened);
btnOk.Click += new EventHandler(Refresh);
btnCancel.Click += new EventHandler(DialogService.CloseEventHappened);
btnGetLatLong.Click += new EventHandler(btnGetLatLong_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
string script_FormatNumber = "";
script_FormatNumber += " function only_required(Address1,pincode,Latitude,Logitute) ";
script_FormatNumber += " {";
script_FormatNumber += "    var df = true;";
script_FormatNumber += "     if(Address1.trim() == '') { df =  false; }";       
script_FormatNumber += "     if(pincode.trim() == '') {df =  false; }";       
script_FormatNumber += "     if(Latitude.trim() == '' || Latitude.trim() == '0') {df =  false; }";       
script_FormatNumber += "     if(Logitute.trim() == ''||Logitute.trim() == '0') {df =  false; }";       

script_FormatNumber += "     if(!df) {";
script_FormatNumber += "     alert('Please Fill Required fields');";
script_FormatNumber += " return df;} else {";
// script_FormatNumber += " { document.getElementById('MainContent_InsertContact_txtAccountAddress').value = Address1 + pincode + Latitude + Logitute;";
script_FormatNumber += " }}";
ScriptManager.RegisterStartupScript(Page, Page.GetType(), "Validate", script_FormatNumber, true);
btnOk.Attributes.Add("onclick", "return only_required(document.getElementById('" + txtAddress1.ClientID + "').value,document.getElementById('" + txtPostalCode.ClientID + "').value,document.getElementById('" + txtLatitute.ClientID + "').value,document.getElementById('" + txtLongitude.ClientID + "').value);");

txtAddress1_lbl.ForeColor = System.Drawing.Color.Red;
txtPostalCode_lbl.ForeColor = System.Drawing.Color.Red;
txtLatitute_lbl.ForeColor = System.Drawing.Color.Red;
txtLongitude_lbl.ForeColor = System.Drawing.Color.Red;

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterSaveButton(btnOk);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
ClientBindingMgr.RegisterDialogCancelButton(btnCancel);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new AddEditLeadAddressAdapter(this)); }
}

public class AddEditLeadAddressAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAddEditLeadAddress
{
    public AddEditLeadAddressAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IPickListControl _txtDescription;
    public  Sage.Platform.Controls.IPickListControl txtDescription
    {
        get { return FindControl(ref _txtDescription, "txtDescription"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkIsPrimary;
    public  Sage.Platform.Controls.ICheckBoxControl chkIsPrimary
    {
        get { return FindControl(ref _chkIsPrimary, "chkIsPrimary"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkIsMailing;
    public  Sage.Platform.Controls.ICheckBoxControl chkIsMailing
    {
        get { return FindControl(ref _chkIsMailing, "chkIsMailing"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtAddress1;
    public  Sage.Platform.Controls.ITextBoxControl txtAddress1
    {
        get { return FindControl(ref _txtAddress1, "txtAddress1"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtAddress2;
    public  Sage.Platform.Controls.ITextBoxControl txtAddress2
    {
        get { return FindControl(ref _txtAddress2, "txtAddress2"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtAddress3;
    public  Sage.Platform.Controls.ITextBoxControl txtAddress3
    {
        get { return FindControl(ref _txtAddress3, "txtAddress3"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklCity;
    public  Sage.Platform.Controls.IPickListControl pklCity
    {
        get { return FindControl(ref _pklCity, "pklCity"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklState;
    public  Sage.Platform.Controls.IPickListControl pklState
    {
        get { return FindControl(ref _pklState, "pklState"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtPostalCode;
    public  Sage.Platform.Controls.ITextBoxControl txtPostalCode
    {
        get { return FindControl(ref _txtPostalCode, "txtPostalCode"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklCountry;
    public  Sage.Platform.Controls.IPickListControl pklCountry
    {
        get { return FindControl(ref _pklCountry, "pklCountry"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtSalutation;
    public  Sage.Platform.Controls.ITextBoxControl txtSalutation
    {
        get { return FindControl(ref _txtSalutation, "txtSalutation"); }
    }
    private Sage.Platform.Controls.INumericControl _txtLatitute;
    public  Sage.Platform.Controls.INumericControl txtLatitute
    {
        get { return FindControl(ref _txtLatitute, "txtLatitute"); }
    }
    private Sage.Platform.Controls.INumericControl _txtLongitude;
    public  Sage.Platform.Controls.INumericControl txtLongitude
    {
        get { return FindControl(ref _txtLongitude, "txtLongitude"); }
    }
    private Sage.Platform.Controls.IControlsListControl _QFControlsList;
    public  Sage.Platform.Controls.IControlsListControl QFControlsList
    {
        get { return FindControl(ref _QFControlsList, "QFControlsList"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnOk;
    public  Sage.Platform.Controls.IButtonControl btnOk
    {
        get { return FindControl(ref _btnOk, "btnOk"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnCancel;
    public  Sage.Platform.Controls.IButtonControl btnCancel
    {
        get { return FindControl(ref _btnCancel, "btnCancel"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnGetLatLong;
    public  Sage.Platform.Controls.IButtonControl btnGetLatLong
    {
        get { return FindControl(ref _btnGetLatLong, "btnGetLatLong"); }
    }
    private Sage.Platform.Controls.ILabelControl _lblError;
    public  Sage.Platform.Controls.ILabelControl lblError
    {
        get { return FindControl(ref _lblError, "lblError"); }
    }

}

</script>

<script type="text/javascript">
</script>
