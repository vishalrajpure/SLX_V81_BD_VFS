<%@ Control Language="C#" ClassName="LeadDetails" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="20%" />
            <col width="20%" />
            <col width="40%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtCompany_lbl" AssociatedControlID="txtCompany" runat="server" Text="<%$ resources: txtCompany.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtCompany" Required="true"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="emlEmail_lbl" AssociatedControlID="emlEmail" runat="server" Text="<%$ resources: emlEmail.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
<SalesLogix:Email runat="server" ID="emlEmail" ButtonToolTip="<%$ resources: emlEmail.ButtonToolTip %>" EmailTextBoxStyle-ForeColor="#000099" EmailTextBoxStyle-Font-Underline="false" />
  </div>

      </td>
                <td  >
 <asp:Button runat="server" ID="cmdQualifyLead"
 Text="<%$ resources: cmdQualifyLead.Caption %>" CssClass="slxbutton"  />
 
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtLegalName_lbl" AssociatedControlID="txtLegalName" runat="server" Text="<%$ resources: txtLegalName.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtLegalName" Required="true"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="phnWorkPhone_lbl" AssociatedControlID="phnWorkPhone" runat="server" Text="<%$ resources: phnWorkPhone.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phnWorkPhone"
Required="true"  />
  </div>

      </td>
                <td  >
 <asp:Button runat="server" ID="cmdConvertLead"
 Text="<%$ resources: cmdConvertLead.Caption %>" CssClass="slxbutton"  />
 
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklTitle_lbl" AssociatedControlID="pklTitle" runat="server" Text="<%$ resources: pklTitle.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklTitle" PickListName="Title" MustExistInList="false" AlphaSort="true"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="phnTollFree_lbl" AssociatedControlID="phnTollFree" runat="server" Text="<%$ resources: phnTollFree.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phnTollFree"
 />
  </div>

      </td>
                <td rowspan="7"  >
<%@ Register tagPrefix="SalesLogix" tagName="wbrQualifications" src="~/SmartParts/Lead/LeadQualifications.ascx" %>
<SalesLogix:wbrQualifications id="wbrQualifications" runat="server" OnInit="setwbrQualificationsContext" Visible="false" ></SalesLogix:wbrQualifications>
<script runat="server" type="text/C#">
	protected void setwbrQualificationsContext(object sender, EventArgs e)
	{
		Sage.Platform.WebPortal.SmartParts.SmartPart sp = wbrQualifications as Sage.Platform.WebPortal.SmartParts.SmartPart;
		if (sp != null)
		{
			sp.InitSmartPart(ParentWorkItem, PageWorkItem.Services.Get<Sage.Platform.Application.UI.Web.IPageWorkItemLocator>());
			sp.DialogService = DialogService;
			Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPart esp = sp as Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPart;
			if (esp != null)
			{
                esp.InitEntityBoundSmartPart(PageWorkItem.Services.Get<Sage.Platform.Application.IEntityContextService>());
			}
		}
	}
</script>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="nmeLeadName_lbl" AssociatedControlID="nmeLeadName" runat="server" Text="<%$ resources: nmeLeadName.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol"  >
    <SalesLogix:FullName runat="server" ID="nmeLeadName" Required="true" ButtonToolTip="<%$ resources: nmeLeadName.ButtonToolTip %>"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="urlWeb_lbl" AssociatedControlID="urlWeb" runat="server" Text="<%$ resources: urlWeb.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:URL runat="server" ID="urlWeb" ButtonToolTip="<%$ resources: urlWeb.ButtonToolTip %>" URLTextBoxStyle-ForeColor="#000099" URLTextBoxStyle-Font-Underline="false" />
  </div>

      </td>
            </tr>
<tr>
            <td  >
<div class=" lbl alignleft">
    <asp:Label ID="txtBusinessPotential_lbl" AssociatedControlID="txtBusinessPotential" runat="server" Text="<%$ resources: txtBusinessPotential.Caption %>" ></asp:Label>
</div>
 <div  class="textcontrol currency"  >
    <SalesLogix:Currency
    runat="server"
    ID="txtBusinessPotential" 
    ExchangeRateType="BaseRate"
     Required="false"
 DecimalDigits="-1"
 />
</div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklStatus_lbl" AssociatedControlID="pklStatus" runat="server" Text="<%$ resources: pklStatus.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklStatus" PickListName="Lead Status" MustExistInList="false" MaxLength="64"  />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <asp:LinkButton runat="server" ID="btnAddress"
 Text="<%$ resources: btnAddress.Caption %>"  />
 
      </td>
                <td></td>
            </tr>
<tr>
            <td rowspan="3"  >
 <div class=" lbl alignleft">
   <asp:Label ID="adrAddress_lbl" AssociatedControlID="adrAddress" runat="server" Text="<%$ resources: adrAddress.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol address"  >
    <SalesLogix:AddressControl runat="server" ID="adrAddress" AddressDescriptionPickListName="Address Description (Lead)" AddressDescriptionPickListId="kSYST0000403" Enabled="false" ButtonToolTip="<%$ resources: adrAddress.ButtonToolTip %>" AddressToolTip="<%$ resources: adrAddress.AddressToolTip %>" >
<AddressDescStyle Height="80"></AddressDescStyle> </SalesLogix:AddressControl>
</div>

      </td>
                <td rowspan="2"  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtBusinessDescription_lbl" AssociatedControlID="txtBusinessDescription" runat="server" Text="<%$ resources: txtBusinessDescription.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtBusinessDescription"  Rows="3" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
            </tr>
<tr>
                    </tr>
<tr>
                  <td></td>
            </tr>
<tr>
            <td rowspan="3"  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtComments_lbl" AssociatedControlID="txtComments" runat="server" Text="<%$ resources: txtComments.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtComments"  Rows="3" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
                      <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkDoNotSolicit"  Text="<%$ resources: chkDoNotSolicit.Caption %>"  CssClass=""
Visible="false" LabelPlacement="right" AutoPostBack="true"  />
</div>
      </td>
      </tr>
<tr>
                        <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkDoNotEmail"  Text="<%$ resources: chkDoNotEmail.Caption %>"  CssClass=""
Visible="false" LabelPlacement="right" AutoPostBack="true"  />
</div>
      </td>
      </tr>
<tr>
                        <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkDoNotCall"  Text="<%$ resources: chkDoNotCall.Caption %>"  CssClass=""
Visible="false" LabelPlacement="right"  />
</div>
      </td>
      </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtAnyInfo_lbl" AssociatedControlID="txtAnyInfo" runat="server" Text="<%$ resources: txtAnyInfo.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtAnyInfo"  dojoType="Sage.UI.Controls.TextBox" MaxLength="128"  />
  </div>

      </td>
                      <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkDoNotMail"  Text="<%$ resources: chkDoNotMail.Caption %>"  CssClass=""
Visible="false" LabelPlacement="right"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpQualifier_lbl" AssociatedControlID="lkpQualifier" runat="server" Text="<%$ resources: lkpQualifier.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:SlxUserControl runat="server" ID="lkpQualifier" Enabled="false"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="ownOwner_lbl" AssociatedControlID="ownOwner" runat="server" Text="<%$ resources: ownOwner.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
<SalesLogix:OwnerControl runat="server" ID="ownOwner" Enabled="false" ButtonToolTip="<%$ resources: ownOwner.ButtonToolTip %>" Required="true" Types="$qfcontrol.Types"  />
  </div>

      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkDoNotFax"  Text="<%$ resources: chkDoNotFax.Caption %>"  CssClass=""
Visible="false" LabelPlacement="right"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpLeadEmployee_lbl" AssociatedControlID="lkpLeadEmployee" runat="server" Text="<%$ resources: lkpLeadEmployee.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:SlxUserControl runat="server" ID="lkpLeadEmployee" Enabled="false"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpQualifiedOn_lbl" AssociatedControlID="dtpQualifiedOn" runat="server" Text="<%$ resources: dtpQualifiedOn.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpQualifiedOn" Enabled="false" DisplayTime="false" />
  </div>

      </td>
                <td rowspan="2"  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtInterests_lbl" AssociatedControlID="txtInterests" runat="server" Text="<%$ resources: txtInterests.Caption %>" Visible="false" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtInterests"  Rows="3" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea" MultiLineMaxLength="128" Visible="false"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpBranchManager_lbl" AssociatedControlID="lkpBranchManager" runat="server" Text="<%$ resources: lkpBranchManager.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:SlxUserControl runat="server" ID="lkpBranchManager" Enabled="false"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueLeadSource_lbl" AssociatedControlID="lueLeadSource" runat="server" Text="<%$ resources: lueLeadSource.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lueLeadSource" ButtonToolTip="<%$ resources: lueLeadSource.ButtonToolTip %>" Enabled="false" LookupEntityName="LeadSource" LookupEntityTypeName="Sage.Entity.Interfaces.ILeadSource, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.AbbrevDescription.PropertyHeader %>" PropertyName="AbbrevDescription" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="Status" PropertyType="System.String" OperatorCode="=" Visible="False"
 FilterValue="<%$ resources: lueLeadSource.LUPF.Status %>"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="3" >
  <hr />
 

      </td>
                  </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSICCode_lbl" AssociatedControlID="txtSICCode" runat="server" Text="<%$ resources: txtSICCode.Caption %>" Visible="false" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSICCode"  dojoType="Sage.UI.Controls.TextBox" Visible="false"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklIndustry_lbl" AssociatedControlID="pklIndustry" runat="server" Text="<%$ resources: pklIndustry.Caption %>" Visible="false" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklIndustry" PickListName="Industry" MustExistInList="false" NoneEditable="true" AlphaSort="true" Visible="false"  />
  </div>

      </td>
                <td></td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="LeadDetails_RTools" ToolbarLocation="right">
   <SalesLogix:GroupNavigator runat="server" ID="gpnLeadGroupNavigator" ></SalesLogix:GroupNavigator>
    <asp:ImageButton runat="server" ID="cmdUpdateLead"
 AlternateText="<%$ resources: cmdUpdateLead.Caption %>"  ToolTip="<%$ resources: cmdUpdateLead.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
 
    <asp:ImageButton runat="server" ID="cmdDeleteLead"
 AlternateText="<%$ resources: cmdDeleteLead.Caption %>"  ToolTip="<%$ resources: cmdDeleteLead.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Delete_16x16" 
 />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=LeadDetails&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkLeadDetailsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="LeadDetails" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ILead); }
}

 

protected override void OnAddEntityBindings() {
                 // txtCompany.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCompanyTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Company", txtCompany, "Text");
        BindingSource.Bindings.Add(txtCompanyTextBinding);
                    // emlEmail.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding emlEmailTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Email", emlEmail, "Text");
        BindingSource.Bindings.Add(emlEmailTextBinding);
                       // txtLegalName.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtLegalNameTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LegalName", txtLegalName, "Text");
        BindingSource.Bindings.Add(txtLegalNameTextBinding);
                    // phnWorkPhone.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding phnWorkPhoneTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("WorkPhone", phnWorkPhone, "Text");
        BindingSource.Bindings.Add(phnWorkPhoneTextBinding);
                       // pklTitle.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklTitlePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Title", pklTitle, "PickListValue");
        BindingSource.Bindings.Add(pklTitlePickListValueBinding);
                    // phnTollFree.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding phnTollFreeTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("TollFree", phnTollFree, "Text");
        BindingSource.Bindings.Add(phnTollFreeTextBinding);
                       // nmeLeadName.NameFirst Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding nmeLeadNameNameFirstBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("FirstName", nmeLeadName, "NameFirst");
        BindingSource.Bindings.Add(nmeLeadNameNameFirstBinding);
                 // nmeLeadName.NameLast Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding nmeLeadNameNameLastBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LastName", nmeLeadName, "NameLast");
        nmeLeadNameNameLastBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(nmeLeadNameNameLastBinding);
                 // nmeLeadName.NameMiddle Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding nmeLeadNameNameMiddleBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("MiddleName", nmeLeadName, "NameMiddle");
        nmeLeadNameNameMiddleBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(nmeLeadNameNameMiddleBinding);
                 // nmeLeadName.NamePrefix Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding nmeLeadNameNamePrefixBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Prefix", nmeLeadName, "NamePrefix");
        nmeLeadNameNamePrefixBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(nmeLeadNameNamePrefixBinding);
                 // nmeLeadName.NameSuffix Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding nmeLeadNameNameSuffixBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Suffix", nmeLeadName, "NameSuffix");
        nmeLeadNameNameSuffixBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(nmeLeadNameNameSuffixBinding);
                    // urlWeb.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding urlWebTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("WebAddress", urlWeb, "Text");
        BindingSource.Bindings.Add(urlWebTextBinding);
                    // txtBusinessPotential.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtBusinessPotentialTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("BussinessPortential", txtBusinessPotential, "Text");
        BindingSource.Bindings.Add(txtBusinessPotentialTextBinding);
                    // pklStatus.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklStatusPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Status", pklStatus, "PickListValue");
        BindingSource.Bindings.Add(pklStatusPickListValueBinding);
                       // adrAddress.AddressCity Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressCityBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.City", adrAddress, "AddressCity");
        adrAddressAddressCityBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressCityBinding);
                 // adrAddress.AddressCountry Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressCountryBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Country", adrAddress, "AddressCountry");
        adrAddressAddressCountryBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressCountryBinding);
                 // adrAddress.AddressCounty Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressCountyBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.County", adrAddress, "AddressCounty");
        adrAddressAddressCountyBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressCountyBinding);
                 // adrAddress.AddressDesc1 Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressDesc1Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Address1", adrAddress, "AddressDesc1");
        BindingSource.Bindings.Add(adrAddressAddressDesc1Binding);
                 // adrAddress.AddressDesc2 Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressDesc2Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Address2", adrAddress, "AddressDesc2");
        adrAddressAddressDesc2Binding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressDesc2Binding);
                 // adrAddress.AddressDesc3 Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressDesc3Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Address3", adrAddress, "AddressDesc3");
        adrAddressAddressDesc3Binding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressDesc3Binding);
                 // adrAddress.AddressDescription Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressDescriptionBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Description", adrAddress, "AddressDescription");
        adrAddressAddressDescriptionBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressDescriptionBinding);
                 // adrAddress.AddressDisplay Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressDisplayBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.FullAddress", adrAddress, "AddressDisplay");
        adrAddressAddressDisplayBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressDisplayBinding);
                 // adrAddress.AddressIsMailing Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressIsMailingBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.IsMailing", adrAddress, "AddressIsMailing");
        adrAddressAddressIsMailingBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressIsMailingBinding);
                 // adrAddress.AddressIsPrimary Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressIsPrimaryBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.IsPrimary", adrAddress, "AddressIsPrimary");
        adrAddressAddressIsPrimaryBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressIsPrimaryBinding);
                 // adrAddress.AddressPostalCode Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressPostalCodeBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.PostalCode", adrAddress, "AddressPostalCode");
        adrAddressAddressPostalCodeBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressPostalCodeBinding);
                 // adrAddress.AddressSalutation Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressSalutationBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Salutation", adrAddress, "AddressSalutation");
        adrAddressAddressSalutationBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressSalutationBinding);
                 // adrAddress.AddressState Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressStateBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.State", adrAddress, "AddressState");
        adrAddressAddressStateBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressStateBinding);
                    // txtBusinessDescription.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtBusinessDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("BusinessDescription", txtBusinessDescription, "Text");
        BindingSource.Bindings.Add(txtBusinessDescriptionTextBinding);
                    // txtComments.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCommentsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Notes", txtComments, "Text");
        BindingSource.Bindings.Add(txtCommentsTextBinding);
                    // chkDoNotSolicit.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkDoNotSolicitCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("DoNotSolicit", chkDoNotSolicit, "Checked");
        BindingSource.Bindings.Add(chkDoNotSolicitCheckedBinding);
                    // chkDoNotEmail.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkDoNotEmailCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("DoNotEmail", chkDoNotEmail, "Checked");
        BindingSource.Bindings.Add(chkDoNotEmailCheckedBinding);
                 // chkDoNotEmail.Enabled Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkDoNotEmailEnabledBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("!DoNotSolicit", chkDoNotEmail, "Enabled");
        chkDoNotEmailEnabledBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(chkDoNotEmailEnabledBinding);
                    // chkDoNotCall.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkDoNotCallCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("DoNotPhone", chkDoNotCall, "Checked");
        BindingSource.Bindings.Add(chkDoNotCallCheckedBinding);
                 // chkDoNotCall.Enabled Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkDoNotCallEnabledBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("!DoNotSolicit", chkDoNotCall, "Enabled");
        chkDoNotCallEnabledBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(chkDoNotCallEnabledBinding);
                    // txtAnyInfo.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAnyInfoTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AnyOtherInformation", txtAnyInfo, "Text");
        BindingSource.Bindings.Add(txtAnyInfoTextBinding);
                    // chkDoNotMail.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkDoNotMailCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("DoNotMail", chkDoNotMail, "Checked");
        BindingSource.Bindings.Add(chkDoNotMailCheckedBinding);
                 // chkDoNotMail.Enabled Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkDoNotMailEnabledBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("!DoNotSolicit", chkDoNotMail, "Enabled");
        chkDoNotMailEnabledBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(chkDoNotMailEnabledBinding);
                    // lkpQualifier.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpQualifierLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Qualifier", lkpQualifier, "LookupResultValue");
        BindingSource.Bindings.Add(lkpQualifierLookupResultValueBinding);
                    // ownOwner.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ownOwnerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Owner", ownOwner, "LookupResultValue");
        BindingSource.Bindings.Add(ownOwnerLookupResultValueBinding);
                    // chkDoNotFax.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkDoNotFaxCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("DoNotFAX", chkDoNotFax, "Checked");
        BindingSource.Bindings.Add(chkDoNotFaxCheckedBinding);
                 // chkDoNotFax.Enabled Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkDoNotFaxEnabledBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("!DoNotSolicit", chkDoNotFax, "Enabled");
        chkDoNotFaxEnabledBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(chkDoNotFaxEnabledBinding);
                    // lkpLeadEmployee.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpLeadEmployeeLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LeadEmployee", lkpLeadEmployee, "LookupResultValue");
        BindingSource.Bindings.Add(lkpLeadEmployeeLookupResultValueBinding);
                    // dtpQualifiedOn.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpQualifiedOnDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("QualifiedON", dtpQualifiedOn, "DateTimeValue");
        BindingSource.Bindings.Add(dtpQualifiedOnDateTimeValueBinding);
                    // txtInterests.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtInterestsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Interests", txtInterests, "Text");
        BindingSource.Bindings.Add(txtInterestsTextBinding);
                    // lkpBranchManager.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpBranchManagerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("BranchManager", lkpBranchManager, "LookupResultValue");
        BindingSource.Bindings.Add(lkpBranchManagerLookupResultValueBinding);
                    // lueLeadSource.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueLeadSourceLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LeadSource", lueLeadSource, "LookupResultValue");
        BindingSource.Bindings.Add(lueLeadSourceLookupResultValueBinding);
                       // txtSICCode.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSICCodeTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SICCode", txtSICCode, "Text");
        BindingSource.Bindings.Add(txtSICCodeTextBinding);
                    // pklIndustry.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklIndustryPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Industry", pklIndustry, "PickListValue");
        BindingSource.Bindings.Add(pklIndustryPickListValueBinding);
    
   
                 
      
      
      
    }
                                                                                                                                                                                                                                       
protected void cmdQualifyLead_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ILead lead = BindingSource.Current as Sage.Entity.Interfaces.ILead;
if(lead.Company == null)
{
	DialogService.ShowMessage("Enter the Company");
		return;
}
if(lead.LegalName == null)
{
	DialogService.ShowMessage("Enter the LegalName");
		return;
}
if(lead.WorkPhone == null)
{
	DialogService.ShowMessage("Enter the WorkPhone");
		return;
}
if(lead.FirstName == null)
{
	DialogService.ShowMessage("Enter the Name");
		return;
}
if(lead.Address.PostalCode == null)
{
	DialogService.ShowMessage("Enter the Address");
		return;
}
if(lead.Products.Count <= 0)
{
	DialogService.ShowMessage("Please Add Product...");
	return;
}
//////////////Specify the Query for find BM///////////
	string qry = "Select Q.SALESMANAGERID  from QUALIFIERANDSMPINCODE Q " +
				"where Q.PINCODE = '"+ lead.Address.PostalCode.ToString() +"'";
	Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
	System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
	System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
	System.Data.DataTable dt = new System.Data.DataTable();
	dataAdapterObj.Fill(dt);
	if(dt.Rows.Count >0)
	{
		Sage.Entity.Interfaces.IUser BM  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser >((object)dt.Rows[0][0].ToString());
		lead.BranchManager = BM;
	}
	else
	{
		DialogService.ShowMessage("Please map the branch manager with pincode-" + lead.Address.PostalCode);
		return;
		
	}
	lead.QualifiedON = DateTime.Now;
	lead.Status = "Qualified";
	
	//Sage.Entity.Interfaces.IUser BM  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser >((object)"ADMIN");
	//lead.BranchManager = BM;
	
	System.Data.OleDb.OleDbDataAdapter dataAdapterObj2 = new System.Data.OleDb.OleDbDataAdapter("Select Optionvalue as DEFAULTSECCODEID from UserOptions where userid = '" + dt.Rows[0][0].ToString() + "' and name ='INSERTSECCODEID'", conObj);
    System.Data.DataTable dt2 = new System.Data.DataTable();
    dataAdapterObj2.Fill(dt2);
    if (dt2.Rows.Count > 0)
    {
        Sage.Entity.Interfaces.IOwner objowner = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOwner>((object)dt2.Rows[0]["DEFAULTSECCODEID"].ToString());
        lead.Owner = objowner;
    }
	else
	{
		
	}
	//Sage.Entity.Interfaces.IOwner objowner = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOwner>((object)"SYST00000001");
    //lead.Owner = objowner;
	lead.Save();
	System.Web.HttpContext.Current.Response.Redirect(string.Format("Lead.aspx?modeid=Detail"));


}
protected void cmdConvertLead_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ILead entity = (Sage.Entity.Interfaces.ILead) this.BindingSource.Current;
if (entity.IsCompanyNameAssigned()) {
            cmdConvertLead_ClickActionS(sender, e);
      
      }
else {
            cmdConvertLead_ClickActionF(sender, e);
      
      }
}
protected void cmdConvertLead_ClickActionS(object sender, EventArgs e) {
if (DialogService != null) {
  // DialogActionItem
  DialogService.SetSpecs(775, 830, "LeadSearchAndConvert", GetLocalResourceObject("817595f0-8b8a-42cb-9d7a-4462e0bbcfad.DialogTitleOverride").ToString() );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.ILead); 
    DialogService.ShowDialog();
}

}
protected void cmdConvertLead_ClickActionF(object sender, EventArgs e) {
  if (DialogService != null) {
    DialogService.ShowMessage(base.GetLocalResourceObject("db9a6317-7f1e-4220-bac0-681479bab985.Message").ToString(), base.GetLocalResourceObject("db9a6317-7f1e-4220-bac0-681479bab985.Title").ToString());
  }

}
protected void btnAddress_ClickAction(object sender, EventArgs e) {
if (DialogService != null)
{
	Sage.Entity.Interfaces.ILead lead = this.BindingSource.Current as Sage.Entity.Interfaces.ILead;    
	if(lead != null)
	{
		//string _idname = lead.Address.Id.ToString() + ",Lead,"+lead.Id.ToString();
        //Session["LeadAddressid"] = _idname;
	    DialogService.SetSpecs(200, 200, 440, 300, "AddEditLeadAddress", "", true);
	    DialogService.EntityType = typeof(Sage.Entity.Interfaces.ILeadAddress);
		DialogService.EntityID = lead.Address.Id.ToString();
	    DialogService.ShowDialog();
	}
}

}
protected void chkDoNotSolicit_ChangeAction(object sender, EventArgs e) {
  Sage.Platform.WebPortal.SmartParts.WebActionEventArgs args = e as Sage.Platform.WebPortal.SmartParts.WebActionEventArgs;
  if (args != null && !string.IsNullOrEmpty(args.PassThroughObject.ToString()) && DialogService != null) {
    DialogService.ShowMessage(args.PassThroughObject.ToString());
  } 

}
protected void chkDoNotEmail_ChangeAction(object sender, EventArgs e) {
  Sage.Platform.WebPortal.SmartParts.WebActionEventArgs args = e as Sage.Platform.WebPortal.SmartParts.WebActionEventArgs;
  if (args != null && !string.IsNullOrEmpty(args.PassThroughObject.ToString()) && DialogService != null) {
    DialogService.ShowMessage(args.PassThroughObject.ToString());
  } 

}
protected void cmdUpdateLead_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ILead lead = BindingSource.Current as Sage.Entity.Interfaces.ILead; 
if(lead.Company == null)
{
	DialogService.ShowMessage("Enter the Company");
		return;
}
if(lead.LegalName == null)
{
	DialogService.ShowMessage("Enter the LegalName");
		return;
}
if(lead.WorkPhone == null)
{
	DialogService.ShowMessage("Enter the WorkPhone");
		return;
}
if(lead.FirstName == null)
{
	DialogService.ShowMessage("Enter the Name");
		return;
}
if(lead.Address.PostalCode == null)
{
	DialogService.ShowMessage("Enter the Address");
		return;
}
Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>(); 
System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString()); 
				
switch(lead.Status) 
{ 
	case "Dropped": //// Set Owner /// 
		Sage.Entity.Interfaces.IOwner objowner = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOwner>((object)"SYST00000002"); 
		lead.Owner = objowner; 
		break; 
	case "Qualified": 
		if(lead.BranchManager == null) 
		{ 
			if(lead.Products.Count > 0)
			{
				string qry = "Select Q.SALESMANAGERID from QUALIFIERANDSMPINCODE Q " + 
					"where Q.PINCODE = '"+ lead.Address.PostalCode.ToString() + "'"; 
				System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj); 
				System.Data.DataTable dt = new System.Data.DataTable(); 
				dataAdapterObj.Fill(dt);
				if(dt.Rows.Count >0)
				{
					Sage.Entity.Interfaces.IUser BM = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>((object)dt.Rows[0][0].ToString()); 
					lead.BranchManager = BM; 
				}
				else
				{
					DialogService.ShowMessage("Please map the branch manager with pincode-" + lead.Address.PostalCode);
					return;
					 
				}
				lead.QualifiedON = DateTime.Now; 
				lead.Status = "Qualified"; 
				//Sage.Entity.Interfaces.IUser BM = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>((object)"ADMIN"); 
				//lead.BranchManager = BM; 
				System.Data.OleDb.OleDbDataAdapter dataAdapterObj2 = new System.Data.OleDb.OleDbDataAdapter("Select Optionvalue as DEFAULTSECCODEID from UserOptions where userid = '" + dt.Rows[0][0].ToString() + "' and name ='INSERTSECCODEID'", conObj); 
				System.Data.DataTable dt2 = new System.Data.DataTable(); 
				dataAdapterObj2.Fill(dt2); 
				if (dt2.Rows.Count > 0) 
				{ 
					Sage.Entity.Interfaces.IOwner objowner1 = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOwner>((object)dt2.Rows[0][0].ToString()); 
					lead.Owner = objowner1; 
				} 
				else
				{
				}
				
			}
			else
			{
				DialogService.ShowMessage("Please Add Product...");
				return;
				
			}
			//Sage.Entity.Interfaces.IOwner objowner = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOwner>((object)"SYST00000001"); 
			//lead.Owner = objowner; 
		} 
		else
		{
				System.Data.OleDb.OleDbDataAdapter dataAdapterObj3 = new System.Data.OleDb.OleDbDataAdapter("Select Optionvalue as DEFAULTSECCODEID from UserOptions where userid = '" + lead.BranchManager.Id.ToString() + "' and name ='INSERTSECCODEID'", conObj); 
				System.Data.DataTable dt3 = new System.Data.DataTable(); 
				dataAdapterObj3.Fill(dt3); 
				if (dt3.Rows.Count > 0) 
				{ 
					Sage.Entity.Interfaces.IOwner objowner2 = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOwner>((object)dt3.Rows[0][0].ToString()); 
					lead.Owner = objowner2; 
				} 
		}
		break; 
	/*case "Converted": 
		if(lead.BranchManager == null) 
		{ 
			DialogService.ShowMessage("You are not authorize to convert lead...");
			return;
			
		} 
		else 
		{ 
			if(cmdConvertLead.Visible ==true) 
			{
			}
			else
			{
				DialogService.ShowMessage("Please Convert lead via Convert Qualified Lead Button...");
				return;
			}
			 
		} 
		break; */
}

lead.Save(); 
//Session.Remove("LeadAddressid");
System.Web.HttpContext.Current.Response.Redirect(string.Format("Lead.aspx?modeid=Detail"));

}
protected void cmdDeleteLead_ClickAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ILead>("Lead.SaveLeadHistory", objarray);

          cmdDeleteLead_ClickActionBRC(sender, e);
    
  
}
protected void cmdDeleteLead_ClickActionBRC(object sender, EventArgs e) {
  Sage.Platform.Orm.Interfaces.IPersistentEntity persistentEntity = this.BindingSource.Current as Sage.Platform.Orm.Interfaces.IPersistentEntity;
  if (persistentEntity != null) {
    persistentEntity.Delete();
  }

          cmdDeleteLead_ClickActionBRCBRC(sender, e);
    
  
}
protected void cmdDeleteLead_ClickActionBRCBRC(object sender, EventArgs e) {
      Response.Redirect("Lead.aspx");
  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 cmdQualifyLead.Click += new EventHandler(cmdQualifyLead_ClickAction);
cmdConvertLead.Click += new EventHandler(cmdConvertLead_ClickAction);
btnAddress.Click += new EventHandler(btnAddress_ClickAction);
chkDoNotSolicit.CheckedChanged += new EventHandler(chkDoNotSolicit_ChangeAction);
chkDoNotEmail.CheckedChanged += new EventHandler(chkDoNotEmail_ChangeAction);
cmdUpdateLead.Click += new ImageClickEventHandler(cmdUpdateLead_ClickAction);
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/LEAD/DELETE"))
{
cmdDeleteLead.Click += new ImageClickEventHandler(cmdDeleteLead_ClickAction);
}
}


}

protected void quickformload0(object sender, EventArgs e) {
ClientBindingMgr.UsePageExitWarning = false;
Sage.Entity.Interfaces.ILead lead = this.BindingSource.Current as Sage.Entity.Interfaces.ILead;
if (lead != null)
{
	//needed because binding expression do not work on null values.
	if (!lead.DoNotSolicit.HasValue)
    {
        chkDoNotEmail.Enabled = true;
        chkDoNotFax.Enabled = true;
        chkDoNotMail.Enabled = true;
        chkDoNotCall.Enabled = true;    
    }
	
	bool doNotSolicit = System.Convert.ToBoolean(lead.DoNotSolicit);
    bool doNotEmail = System.Convert.ToBoolean(lead.DoNotEmail);
    emlEmail.Enabled = (!doNotSolicit && !doNotEmail);
	
	if(lead.BranchManager == null)
	{
		cmdQualifyLead.Visible = true;
		cmdConvertLead.Visible = false;
	}
	else
	{
		cmdQualifyLead.Visible = false;
		cmdConvertLead.Visible = true;
	}
	if(lead.Status.ToUpper() == "CONVERTED" || lead.Status.ToUpper() == "DROPPED" )
	{
		cmdQualifyLead.Visible = false;
		cmdConvertLead.Visible = false;
		cmdUpdateLead.Visible = false;
		cmdDeleteLead.Visible = false;
		
	}
	if(lead.Status.ToUpper() == "QUALIFIED" || lead.Status.ToUpper() == "DROPPED" )
	{
		lkpBranchManager.Enabled = true;
		
	}
	//Begin Load Action


	
	
//End Load Action}

	
}
txtCompany_lbl.ForeColor = System.Drawing.Color.Red;
txtLegalName_lbl.ForeColor = System.Drawing.Color.Red;
phnWorkPhone_lbl.ForeColor = System.Drawing.Color.Red;
nmeLeadName_lbl.ForeColor = System.Drawing.Color.Red;


}
protected override void OnFormBound()
{
cmdDeleteLead.OnClientClick = string.Format("return confirm('{0}');", Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("QFButton2.ActionConfirmationMessage").ToString()));

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (!RoleSecurityService.HasAccess("ENTITIES/LEAD/DELETE"))
{
cmdDeleteLead.Visible = false;
}
quickformload0(this, EventArgs.Empty);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new LeadDetailsAdapter(this)); }
}

public class LeadDetailsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ILeadDetails
{
    public LeadDetailsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ITextBoxControl _txtCompany;
    public  Sage.Platform.Controls.ITextBoxControl txtCompany
    {
        get { return FindControl(ref _txtCompany, "txtCompany"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtLegalName;
    public  Sage.Platform.Controls.ITextBoxControl txtLegalName
    {
        get { return FindControl(ref _txtLegalName, "txtLegalName"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklTitle;
    public  Sage.Platform.Controls.IPickListControl pklTitle
    {
        get { return FindControl(ref _pklTitle, "pklTitle"); }
    }
    private Sage.Platform.Controls.IPersonNameControl _nmeLeadName;
    public  Sage.Platform.Controls.IPersonNameControl nmeLeadName
    {
        get { return FindControl(ref _nmeLeadName, "nmeLeadName"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _txtBusinessPotential;
    public  Sage.Platform.Controls.ICurrencyControl txtBusinessPotential
    {
        get { return FindControl(ref _txtBusinessPotential, "txtBusinessPotential"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnAddress;
    public  Sage.Platform.Controls.IButtonControl btnAddress
    {
        get { return FindControl(ref _btnAddress, "btnAddress"); }
    }
    private Sage.Platform.Controls.IAddressControl _adrAddress;
    public  Sage.Platform.Controls.IAddressControl adrAddress
    {
        get { return FindControl(ref _adrAddress, "adrAddress"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtComments;
    public  Sage.Platform.Controls.ITextBoxControl txtComments
    {
        get { return FindControl(ref _txtComments, "txtComments"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtAnyInfo;
    public  Sage.Platform.Controls.ITextBoxControl txtAnyInfo
    {
        get { return FindControl(ref _txtAnyInfo, "txtAnyInfo"); }
    }
    private Sage.Platform.Controls.IUserControl _lkpQualifier;
    public  Sage.Platform.Controls.IUserControl lkpQualifier
    {
        get { return FindControl(ref _lkpQualifier, "lkpQualifier"); }
    }
    private Sage.Platform.Controls.IUserControl _lkpLeadEmployee;
    public  Sage.Platform.Controls.IUserControl lkpLeadEmployee
    {
        get { return FindControl(ref _lkpLeadEmployee, "lkpLeadEmployee"); }
    }
    private Sage.Platform.Controls.IUserControl _lkpBranchManager;
    public  Sage.Platform.Controls.IUserControl lkpBranchManager
    {
        get { return FindControl(ref _lkpBranchManager, "lkpBranchManager"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtSICCode;
    public  Sage.Platform.Controls.ITextBoxControl txtSICCode
    {
        get { return FindControl(ref _txtSICCode, "txtSICCode"); }
    }
    private Sage.Platform.Controls.IEmailControl _emlEmail;
    public  Sage.Platform.Controls.IEmailControl emlEmail
    {
        get { return FindControl(ref _emlEmail, "emlEmail"); }
    }
    private Sage.Platform.Controls.IPhoneControl _phnWorkPhone;
    public  Sage.Platform.Controls.IPhoneControl phnWorkPhone
    {
        get { return FindControl(ref _phnWorkPhone, "phnWorkPhone"); }
    }
    private Sage.Platform.Controls.IPhoneControl _phnTollFree;
    public  Sage.Platform.Controls.IPhoneControl phnTollFree
    {
        get { return FindControl(ref _phnTollFree, "phnTollFree"); }
    }
    private Sage.Platform.Controls.IUrlControl _urlWeb;
    public  Sage.Platform.Controls.IUrlControl urlWeb
    {
        get { return FindControl(ref _urlWeb, "urlWeb"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklStatus;
    public  Sage.Platform.Controls.IPickListControl pklStatus
    {
        get { return FindControl(ref _pklStatus, "pklStatus"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtBusinessDescription;
    public  Sage.Platform.Controls.ITextBoxControl txtBusinessDescription
    {
        get { return FindControl(ref _txtBusinessDescription, "txtBusinessDescription"); }
    }
    private Sage.Platform.Controls.IOwnerControl _ownOwner;
    public  Sage.Platform.Controls.IOwnerControl ownOwner
    {
        get { return FindControl(ref _ownOwner, "ownOwner"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtpQualifiedOn;
    public  Sage.Platform.Controls.IDateTimePickerControl dtpQualifiedOn
    {
        get { return FindControl(ref _dtpQualifiedOn, "dtpQualifiedOn"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueLeadSource;
    public  Sage.Platform.Controls.ILookupControl lueLeadSource
    {
        get { return FindControl(ref _lueLeadSource, "lueLeadSource"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklIndustry;
    public  Sage.Platform.Controls.IPickListControl pklIndustry
    {
        get { return FindControl(ref _pklIndustry, "pklIndustry"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdQualifyLead;
    public  Sage.Platform.Controls.IButtonControl cmdQualifyLead
    {
        get { return FindControl(ref _cmdQualifyLead, "cmdQualifyLead"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdConvertLead;
    public  Sage.Platform.Controls.IButtonControl cmdConvertLead
    {
        get { return FindControl(ref _cmdConvertLead, "cmdConvertLead"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkDoNotSolicit;
    public  Sage.Platform.Controls.ICheckBoxControl chkDoNotSolicit
    {
        get { return FindControl(ref _chkDoNotSolicit, "chkDoNotSolicit"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkDoNotEmail;
    public  Sage.Platform.Controls.ICheckBoxControl chkDoNotEmail
    {
        get { return FindControl(ref _chkDoNotEmail, "chkDoNotEmail"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkDoNotCall;
    public  Sage.Platform.Controls.ICheckBoxControl chkDoNotCall
    {
        get { return FindControl(ref _chkDoNotCall, "chkDoNotCall"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkDoNotMail;
    public  Sage.Platform.Controls.ICheckBoxControl chkDoNotMail
    {
        get { return FindControl(ref _chkDoNotMail, "chkDoNotMail"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkDoNotFax;
    public  Sage.Platform.Controls.ICheckBoxControl chkDoNotFax
    {
        get { return FindControl(ref _chkDoNotFax, "chkDoNotFax"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtInterests;
    public  Sage.Platform.Controls.ITextBoxControl txtInterests
    {
        get { return FindControl(ref _txtInterests, "txtInterests"); }
    }
    private Sage.Platform.Controls.IGroupNavigatorControl _gpnLeadGroupNavigator;
    public  Sage.Platform.Controls.IGroupNavigatorControl gpnLeadGroupNavigator
    {
        get { return FindControl(ref _gpnLeadGroupNavigator, "gpnLeadGroupNavigator"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdUpdateLead;
    public  Sage.Platform.Controls.IButtonControl cmdUpdateLead
    {
        get { return FindControl(ref _cmdUpdateLead, "cmdUpdateLead"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdDeleteLead;
    public  Sage.Platform.Controls.IButtonControl cmdDeleteLead
    {
        get { return FindControl(ref _cmdDeleteLead, "cmdDeleteLead"); }
    }

}

</script>

<script type="text/javascript">
</script>
