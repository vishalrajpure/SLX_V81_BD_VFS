<%@ Control Language="C#" ClassName="InsertLead" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="33%" />
            <col width="33%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="nmeLeadName_lbl" AssociatedControlID="nmeLeadName" runat="server" Text="<%$ resources: nmeLeadName.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol"  >
    <SalesLogix:FullName runat="server" ID="nmeLeadName" Required="true" ButtonToolTip="<%$ resources: nmeLeadName.ButtonToolTip %>"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtLegalName_lbl" AssociatedControlID="txtLegalName" runat="server" Text="<%$ resources: txtLegalName.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtLegalName"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtCompany_lbl" AssociatedControlID="txtCompany" runat="server" Text="<%$ resources: txtCompany.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtCompany" Required="true"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="phnWorkPhone_lbl" AssociatedControlID="phnWorkPhone" runat="server" Text="<%$ resources: phnWorkPhone.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phnWorkPhone"
Required="true" AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="emlEmail_lbl" AssociatedControlID="emlEmail" runat="server" Text="<%$ resources: emlEmail.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
<SalesLogix:Email runat="server" ID="emlEmail" ButtonToolTip="<%$ resources: emlEmail.ButtonToolTip %>" EmailTextBoxStyle-ForeColor="#000099" EmailTextBoxStyle-Font-Underline="false" />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="phnTollFree_lbl" AssociatedControlID="phnTollFree" runat="server" Text="<%$ resources: phnTollFree.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phnTollFree"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklTitle_lbl" AssociatedControlID="pklTitle" runat="server" Text="<%$ resources: pklTitle.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklTitle" PickListName="Title" MustExistInList="false" AlphaSort="true"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="urlWebAddress_lbl" AssociatedControlID="urlWebAddress" runat="server" Text="<%$ resources: urlWebAddress.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:URL runat="server" ID="urlWebAddress" ButtonToolTip="<%$ resources: urlWebAddress.ButtonToolTip %>" URLTextBoxStyle-ForeColor="#000099" URLTextBoxStyle-Font-Underline="false" />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtBusinessPotential_lbl" AssociatedControlID="txtBusinessPotential" runat="server" Text="<%$ resources: txtBusinessPotential.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="txtBusinessPotential"
FormatType="Decimal" DecimalDigits="2" Strict="False" 
 />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklStatus_lbl" AssociatedControlID="pklStatus" runat="server" Text="<%$ resources: pklStatus.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklStatus" PickListName="Lead Status" MustExistInList="false" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
<asp:Panel runat="server" ID="QFControlsList" CssClass="controlslist "
>
   <asp:LinkButton runat="server" ID="cmdAddress"
 Text="<%$ resources: cmdAddress.Caption %>"  />
 
   <asp:ImageButton runat="server" ID="cmdShowMap"
 ToolTip="<%$ resources: cmdShowMap.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Get_Map_16x16"  />
 
</asp:Panel>
      </td>
                <td></td>
      </tr>
<tr>
            <td rowspan="4"  >
 <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtAccountAddress" Enabled="false"  Rows="4" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkAutoSearch"  Text="<%$ resources: chkAutoSearch.Caption %>"  CssClass=""
LabelPlacement="right" AutoPostBack="true"  />
</div>
      </td>
      </tr>
<tr>
                  <td rowspan="2"  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtBusinessDescription_lbl" AssociatedControlID="txtBusinessDescription" runat="server" Text="<%$ resources: txtBusinessDescription.Caption %>" Visible="false" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtBusinessDescription"  Rows="3" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea" Visible="false"  />
  </div>

      </td>
      </tr>
<tr>
              </tr>
<tr>
                  <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="adrAddress_lbl" AssociatedControlID="adrAddress" runat="server" Text="<%$ resources: adrAddress.Caption %>" Visible="false" ></asp:Label>
 </div>
   <div  class="textcontrol address"  >
    <SalesLogix:AddressControl runat="server" ID="adrAddress" AddressDescriptionPickListName="Address Description (Lead)" AddressDescriptionPickListId="kSYST0000403" Enabled="false" ButtonToolTip="<%$ resources: adrAddress.ButtonToolTip %>" AddressToolTip="<%$ resources: adrAddress.AddressToolTip %>" Visible="false" >
<AddressDescStyle Height="80"></AddressDescStyle> </SalesLogix:AddressControl>
</div>

      </td>
      </tr>
<tr>
            <td  >
 <asp:Button runat="server" ID="cmdMatchingRecords"
 Text="<%$ resources: cmdMatchingRecords.Caption %>" CssClass="slxbutton"  />
 
      </td>
                <td rowspan="2"  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtInterests_lbl" AssociatedControlID="txtInterests" runat="server" Text="<%$ resources: txtInterests.Caption %>" Visible="false" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtInterests"  Rows="3" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea" MultiLineMaxLength="128" Visible="false"  />
  </div>

      </td>
      </tr>
<tr>
            <td></td>
            </tr>
<tr>
            <td rowspan="4"  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtComments_lbl" AssociatedControlID="txtComments" runat="server" Text="<%$ resources: txtComments.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtComments"  Rows="3" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
            </tr>
<tr>
              </tr>
<tr>
              </tr>
<tr>
              </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtAnyInfo_lbl" AssociatedControlID="txtAnyInfo" runat="server" Text="<%$ resources: txtAnyInfo.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtAnyInfo"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpLeadEmployee_lbl" AssociatedControlID="lkpLeadEmployee" runat="server" Text="<%$ resources: lkpLeadEmployee.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpLeadEmployee" LookupEntityName="Vwempmaster" LookupEntityTypeName="Sage.Entity.Interfaces.IVwempmaster, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpLeadEmployee.LookupProperties.Cemplname.PropertyHeader %>" PropertyName="Cemplname" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpLeadEmployee.LookupProperties.Cemplcode.PropertyHeader %>" PropertyName="Cemplcode" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpLeadEmployee.LookupProperties.Cjobrole.PropertyHeader %>" PropertyName="Cjobrole" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpLeadEmployee.LookupProperties.carea.PropertyHeader %>" PropertyName="carea" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueLeadSource_lbl" AssociatedControlID="lueLeadSource" runat="server" Text="<%$ resources: lueLeadSource.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lueLeadSource" ButtonToolTip="<%$ resources: lueLeadSource.ButtonToolTip %>" Enabled="false" LookupEntityName="LeadSource" LookupEntityTypeName="Sage.Entity.Interfaces.ILeadSource, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.AbbrevDescription.PropertyHeader %>" PropertyName="AbbrevDescription" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="Status" PropertyType="System.String" OperatorCode="=" Visible="False"
 FilterValue="<%$ resources: lueLeadSource.LUPF.Status %>"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpQualifier_lbl" AssociatedControlID="lkpQualifier" runat="server" Text="<%$ resources: lkpQualifier.Caption %>" Visible="false" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:SlxUserControl runat="server" ID="lkpQualifier" Enabled="false" Visible="false"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpQualifiedOn_lbl" AssociatedControlID="dtpQualifiedOn" runat="server" Text="<%$ resources: dtpQualifiedOn.Caption %>" Visible="false" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpQualifiedOn" Enabled="false" DisplayTime="false" Visible="false" />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpBranchManager_lbl" AssociatedControlID="lkpBranchManager" runat="server" Text="<%$ resources: lkpBranchManager.Caption %>" Visible="false" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:SlxUserControl runat="server" ID="lkpBranchManager" Enabled="false" Visible="false"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="ownOwner_lbl" AssociatedControlID="ownOwner" runat="server" Text="<%$ resources: ownOwner.Caption %>" Visible="false" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
<SalesLogix:OwnerControl runat="server" ID="ownOwner" Enabled="false" ButtonToolTip="<%$ resources: ownOwner.ButtonToolTip %>" Required="true" Types="$qfcontrol.Types" Visible="false"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklIndustry_lbl" AssociatedControlID="pklIndustry" runat="server" Text="<%$ resources: pklIndustry.Caption %>" Visible="false" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklIndustry" PickListName="Industry" MustExistInList="false" NoneEditable="true" AlphaSort="true" Visible="false"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSICCode_lbl" AssociatedControlID="txtSICCode" runat="server" Text="<%$ resources: txtSICCode.Caption %>" Visible="false" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSICCode"  dojoType="Sage.UI.Controls.TextBox" Visible="false"  />
  </div>

      </td>
      </tr>
<tr>
            <td></td>
                <td></td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="InsertLead_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="cmdSave"
 AlternateText="<%$ resources: cmdSave.Caption %>"  ToolTip="<%$ resources: cmdSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
 
    <asp:ImageButton runat="server" ID="cmdSaveNew"
 AlternateText="<%$ resources: cmdSaveNew.Caption %>"  ToolTip="<%$ resources: cmdSaveNew.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_New16x16"  />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=InsertLead&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkInsertLeadHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="InsertLead" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ILead); }
}

 

protected override void OnAddEntityBindings() {
                 // nmeLeadName.NameFirst Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding nmeLeadNameNameFirstBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("FirstName", nmeLeadName, "NameFirst");
        BindingSource.Bindings.Add(nmeLeadNameNameFirstBinding);
                 // nmeLeadName.NameLast Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding nmeLeadNameNameLastBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LastName", nmeLeadName, "NameLast");
        nmeLeadNameNameLastBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(nmeLeadNameNameLastBinding);
                 // nmeLeadName.NameMiddle Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding nmeLeadNameNameMiddleBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("MiddleName", nmeLeadName, "NameMiddle");
        nmeLeadNameNameMiddleBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(nmeLeadNameNameMiddleBinding);
                 // nmeLeadName.NamePrefix Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding nmeLeadNameNamePrefixBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Prefix", nmeLeadName, "NamePrefix");
        nmeLeadNameNamePrefixBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(nmeLeadNameNamePrefixBinding);
                 // nmeLeadName.NameSuffix Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding nmeLeadNameNameSuffixBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Suffix", nmeLeadName, "NameSuffix");
        nmeLeadNameNameSuffixBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(nmeLeadNameNameSuffixBinding);
                    // txtLegalName.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtLegalNameTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LegalName", txtLegalName, "Text");
        BindingSource.Bindings.Add(txtLegalNameTextBinding);
                    // txtCompany.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCompanyTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Company", txtCompany, "Text");
        BindingSource.Bindings.Add(txtCompanyTextBinding);
                    // phnWorkPhone.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding phnWorkPhoneTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("WorkPhone", phnWorkPhone, "Text");
        BindingSource.Bindings.Add(phnWorkPhoneTextBinding);
                    // emlEmail.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding emlEmailTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Email", emlEmail, "Text");
        BindingSource.Bindings.Add(emlEmailTextBinding);
                    // phnTollFree.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding phnTollFreeTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("TollFree", phnTollFree, "Text");
        BindingSource.Bindings.Add(phnTollFreeTextBinding);
                    // pklTitle.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklTitlePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Title", pklTitle, "PickListValue");
        BindingSource.Bindings.Add(pklTitlePickListValueBinding);
                    // urlWebAddress.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding urlWebAddressTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("WebAddress", urlWebAddress, "Text");
        BindingSource.Bindings.Add(urlWebAddressTextBinding);
                    // txtBusinessPotential.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtBusinessPotentialTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("BussinessPortential", txtBusinessPotential, "Text");
        BindingSource.Bindings.Add(txtBusinessPotentialTextBinding);
                    // pklStatus.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklStatusPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Status", pklStatus, "PickListValue");
        BindingSource.Bindings.Add(pklStatusPickListValueBinding);
                                   // txtBusinessDescription.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtBusinessDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("BusinessDescription", txtBusinessDescription, "Text");
        BindingSource.Bindings.Add(txtBusinessDescriptionTextBinding);
                    // adrAddress.AddressCity Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressCityBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.City", adrAddress, "AddressCity");
        adrAddressAddressCityBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressCityBinding);
                 // adrAddress.AddressCountry Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressCountryBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Country", adrAddress, "AddressCountry");
        adrAddressAddressCountryBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressCountryBinding);
                 // adrAddress.AddressCounty Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressCountyBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.County", adrAddress, "AddressCounty");
        adrAddressAddressCountyBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressCountyBinding);
                 // adrAddress.AddressDesc1 Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressDesc1Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Address1", adrAddress, "AddressDesc1");
        BindingSource.Bindings.Add(adrAddressAddressDesc1Binding);
                 // adrAddress.AddressDesc2 Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressDesc2Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Address2", adrAddress, "AddressDesc2");
        adrAddressAddressDesc2Binding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressDesc2Binding);
                 // adrAddress.AddressDesc3 Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressDesc3Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Address3", adrAddress, "AddressDesc3");
        adrAddressAddressDesc3Binding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressDesc3Binding);
                 // adrAddress.AddressDescription Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressDescriptionBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Description", adrAddress, "AddressDescription");
        adrAddressAddressDescriptionBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressDescriptionBinding);
                 // adrAddress.AddressDisplay Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressDisplayBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.FullAddress", adrAddress, "AddressDisplay");
        adrAddressAddressDisplayBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressDisplayBinding);
                 // adrAddress.AddressIsMailing Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressIsMailingBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.IsMailing", adrAddress, "AddressIsMailing");
        adrAddressAddressIsMailingBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressIsMailingBinding);
                 // adrAddress.AddressIsPrimary Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressIsPrimaryBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.IsPrimary", adrAddress, "AddressIsPrimary");
        adrAddressAddressIsPrimaryBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressIsPrimaryBinding);
                 // adrAddress.AddressPostalCode Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressPostalCodeBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.PostalCode", adrAddress, "AddressPostalCode");
        adrAddressAddressPostalCodeBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressPostalCodeBinding);
                 // adrAddress.AddressSalutation Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressSalutationBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.Salutation", adrAddress, "AddressSalutation");
        adrAddressAddressSalutationBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressSalutationBinding);
                 // adrAddress.AddressState Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrAddressAddressStateBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Address.State", adrAddress, "AddressState");
        adrAddressAddressStateBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(adrAddressAddressStateBinding);
                       // txtInterests.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtInterestsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Interests", txtInterests, "Text");
        BindingSource.Bindings.Add(txtInterestsTextBinding);
                    // txtComments.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCommentsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Notes", txtComments, "Text");
        BindingSource.Bindings.Add(txtCommentsTextBinding);
                    // txtAnyInfo.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAnyInfoTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AnyOtherInformation", txtAnyInfo, "Text");
        BindingSource.Bindings.Add(txtAnyInfoTextBinding);
                    // lkpLeadEmployee.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpLeadEmployeeLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("UserID", lkpLeadEmployee, "LookupResultValue");
        BindingSource.Bindings.Add(lkpLeadEmployeeLookupResultValueBinding);
                    // lueLeadSource.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueLeadSourceLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LeadSource", lueLeadSource, "LookupResultValue");
        BindingSource.Bindings.Add(lueLeadSourceLookupResultValueBinding);
                    // lkpQualifier.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpQualifierLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Qualifier", lkpQualifier, "LookupResultValue");
        BindingSource.Bindings.Add(lkpQualifierLookupResultValueBinding);
                    // dtpQualifiedOn.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpQualifiedOnDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("QualifiedON", dtpQualifiedOn, "DateTimeValue");
        BindingSource.Bindings.Add(dtpQualifiedOnDateTimeValueBinding);
                    // lkpBranchManager.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpBranchManagerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("BranchManager", lkpBranchManager, "LookupResultValue");
        BindingSource.Bindings.Add(lkpBranchManagerLookupResultValueBinding);
                    // ownOwner.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ownOwnerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Owner", ownOwner, "LookupResultValue");
        BindingSource.Bindings.Add(ownOwnerLookupResultValueBinding);
                    // pklIndustry.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklIndustryPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Industry", pklIndustry, "PickListValue");
        BindingSource.Bindings.Add(pklIndustryPickListValueBinding);
                    // txtSICCode.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSICCodeTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SICCode", txtSICCode, "Text");
        BindingSource.Bindings.Add(txtSICCodeTextBinding);
    
   
        }
                                                                                                                                                                                                           
protected void phnWorkPhone_ChangeAction(object sender, EventArgs e) {
if (chkAutoSearch.Checked)
{
    if (DialogService != null)
    {
        DialogService.SetSpecs(150, 150, 680, 810, "LeadSearchForDuplicates", GetLocalResourceObject("88210646-7333-4492-b080-6227e297ba66.DialogTitleOverride").ToString(), true);
        DialogService.EntityType = typeof (Sage.Entity.Interfaces.ILead);
        DialogService.ShowDialog();
    }
}

}
protected void cmdAddress_ClickAction(object sender, EventArgs e) {
if (DialogService != null)
{
	Sage.Entity.Interfaces.ILead lead = this.BindingSource.Current as Sage.Entity.Interfaces.ILead;    
	
    if(lead != null)
	{		
		
	    DialogService.SetSpecs(200, 200, 440, 300, "AddLeadAddress", "", true);
	    DialogService.EntityType = typeof(Sage.Entity.Interfaces.ILeadAddress);
		
	    DialogService.ShowDialog();
	}
}



}
protected void cmdShowMap_ClickAction(object sender, EventArgs e) {
if (Session["LeadAddressid"] != null)
{
    Sage.Entity.Interfaces.ILeadAddress objadd = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadAddress>(Session["LeadAddressid"].ToString());
	
    if (objadd != null)
    {		
		string url = "http://maps.google.com/maps?q=" + objadd.Latitude +"," + objadd.Logitude;
		ScriptManager.RegisterStartupScript(Page, typeof(Page), "ShowMap", "window.open('" + url + "');",true);
	}
}
else
{
	DialogService.ShowMessage("Please Enter Address...");
	return;
}


}
protected void chkAutoSearch_ChangeAction(object sender, EventArgs e) {
Sage.SalesLogix.Security.SLXUserService service = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IUserService>() as Sage.SalesLogix.Security.SLXUserService;
Sage.Platform.Application.Services.IUserOptionsService userOption = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Application.Services.IUserOptionsService>();
userOption.SetCommonOption("AutoSearch", "General", chkAutoSearch.Checked.ToString(), true);

}
protected void cmdMatchingRecords_ClickAction(object sender, EventArgs e) {
if (DialogService != null) {
  // DialogActionItem
  DialogService.SetSpecs(775, 830, "LeadSearchForDuplicates", GetLocalResourceObject("88210646-7333-4492-b080-6227e297ba66.DialogTitleOverride").ToString() );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.ILead); 
    DialogService.ShowDialog();
}

}
protected void lkpLeadEmployee_ChangeAction(object sender, EventArgs e) {
    Sage.Entity.Interfaces.ILead lead = BindingSource.Current as Sage.Entity.Interfaces.ILead;
	string qry = "select case when CBU = 'DHL' then (Select LEADSOURCEID From LEADSOURCE LS where LS.DESCRIPTION = 'XBU') " +
		"else (Select LEADSOURCEID From LEADSOURCE LS where LS.DESCRIPTION = 'BDU') end " +
		"From VWEMPMASTER emp where emp.EMPMSTID = '" + lead.UserID +  "'";
	
	Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
	System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
	System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
	System.Data.DataTable dt = new System.Data.DataTable();
	dataAdapterObj.Fill(dt);
	
	
	if(dt.Rows.Count > 0)
	{
		Sage.Entity.Interfaces.ILeadSource ls  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadSource>((object)dt.Rows[0][0].ToString());	
		lead.LeadSource = ls;
	}
	else
	{
		Sage.Entity.Interfaces.ILeadSource ld = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadSource>((object)"LDEMOA000003");	
		lead.LeadSource = ld;
	}

}
protected void cmdSave_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ILead lead = BindingSource.Current as Sage.Entity.Interfaces.ILead;
if(lead.Company == null)
{
	DialogService.ShowMessage("Enter the Company");
		return;
}
/*if(lead.LegalName == null)
{
	DialogService.ShowMessage("Enter the LegalName");
		return;
}*/
if(lead.WorkPhone == null)
{
	DialogService.ShowMessage("Enter the WorkPhone");
		return;
}
if(lead.FirstName == null)
{
	DialogService.ShowMessage("Enter the Name");
		return;
}
if (lead.Products.Count <= 0)
{
    DialogService.ShowMessage("Product Required...");
    return;
}

string qry = "Select Account From Account where Account = '" + txtCompany.Text + "'";
Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
System.Data.DataTable dt = new System.Data.DataTable();
dataAdapterObj.Fill(dt);
if (dt.Rows.Count > 0)
{
    DialogService.ShowMessage("This Company Name is already exists");
    return;
}
if (Session["LeadAddressid"] != null)
{
    
    Sage.Entity.Interfaces.ILeadAddress objadd = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadAddress>(Session["LeadAddressid"].ToString());
    if (objadd != null)
    {
//////////////Specify the Query for find BM///////////
		qry = "Select CPINCODE from VWPINCODEMASTER where CPINCODE ='" + objadd.PostalCode.ToString() + "'";
			
		dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
		dt = new System.Data.DataTable();
		dataAdapterObj.Fill(dt);
		if (dt.Rows.Count > 0)
	    {	
			qry = "Select distinct Q.QUALIFIERID From QUALIFIERANDSMPINCODE Q, VWPINCODEMASTER VW,VWAREAMASTER VA " +
				"where VA.cscrcd = VW.cscrcd AND VA.CBranch = Q.Branch AND VW.CPINCODE = '" + objadd.PostalCode.ToString() + "'";


			//Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
			//System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
			dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
			dt = new System.Data.DataTable();
			dataAdapterObj.Fill(dt);
			if (dt.Rows.Count > 0)
		    {
				Sage.Entity.Interfaces.IUser BM  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>((object)dt.Rows[0][0].ToString());
				//Sage.Entity.Interfaces.IUser BM  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser >((object)"ADMIN");
				lead.Qualifier = BM;
				lead.AccountManager = BM;
			}
			else
			{
		        DialogService.ShowMessage("Please map the Qualifier with pincode-" + objadd.PostalCode.ToString());
				return;
				 
			}
		}
		else
		{
			//qry = "select case when CPINCODE is null then (Select Q.QUALIFIERID  from QUALIFIERANDSMPINCODE Q " +
		     //           "where Q.PINCODE = '000000') else (Select Q.QUALIFIERID  from QUALIFIERANDSMPINCODE Q " +
		       //		"where Q.PINCODE = '" + objadd.PostalCode.ToString() + "') end QUALIFIERID from VWPINCODEMASTER where CPINCODE ='" + objadd.PostalCode.ToString() + "'";
			qry = "Select Q.QUALIFIERID  from QUALIFIERANDSMPINCODE Q " +
		                "where Q.PINCODE = 'XXX'";


			dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
			dt = new System.Data.DataTable();
			dataAdapterObj.Fill(dt);
			if (dt.Rows.Count > 0)
		    {
				Sage.Entity.Interfaces.IUser BM  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>((object)dt.Rows[0][0].ToString());
				lead.Qualifier = BM;
				lead.AccountManager = BM;
			}
			else
			{
		        DialogService.ShowMessage("Please map the Qualifier with pincode-Default");
				return;
				 
			}
		}
		
		
		System.Data.OleDb.OleDbDataAdapter dataAdapterObj2 = new System.Data.OleDb.OleDbDataAdapter("Select Optionvalue as DEFAULTSECCODEID from UserOptions where userid = '" + dt.Rows[0][0].ToString() + "' and Upper(name) ='INSERTSECCODEID'", conObj);
	    System.Data.DataTable dt2 = new System.Data.DataTable();
	    dataAdapterObj2.Fill(dt2);
	    if (dt2.Rows.Count > 0)
	    {
	        Sage.Entity.Interfaces.IOwner objowner = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOwner>((object)dt2.Rows[0]["DEFAULTSECCODEID"].ToString());
	        lead.Owner = objowner;
	    }
		else
		{
		}
		//Sage.Entity.Interfaces.IOwner objowner = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOwner>((object)"SYST00000001");
	    //lead.Owner = objowner;
		lead.Address = objadd;
		lead.Save();
		//lead.Address.LeadId = lead.Id.ToString();
		//lead.Address.Save();
		if(lead.Products.Count > 0)
		{
			foreach(Sage.Entity.Interfaces.ILeadProduct prd in lead.Products )
			{
				prd.Save();
			}
		}
		if(lead.Competitors.Count > 0)
		{
			foreach(Sage.Entity.Interfaces.ILeadCompetitor cmp in lead.Competitors)
			{
				cmp.Save();
			}	
		}
		
		lead.Save();
		
		Session.Remove("LeadAddressid");
		System.Web.HttpContext.Current.Response.Redirect(string.Format("Lead.aspx", "&modeid=Detail"));
	}
	else
	{
		DialogService.ShowMessage("Enter the Address");
		return;
	}
}
else
{
	DialogService.ShowMessage("Enter the Address");
		return;
}


}
protected void cmdSaveNew_ClickAction(object sender, EventArgs e) {
/*	object[] objarray = new object[] {  this.BindingSource.Current };
	Sage.Platform.EntityFactory.Execute<Sage.SalesLogix.Entities.Lead>("Lead.SaveLead", objarray);
	Response.Redirect("InsertLead.aspx?modeid=Insert");
	*/
	

Sage.Entity.Interfaces.ILead lead = BindingSource.Current as Sage.Entity.Interfaces.ILead;
if(lead.Company == null)
{
	DialogService.ShowMessage("Enter the Company");
		return;
}
/*if(lead.LegalName == null)
{
	DialogService.ShowMessage("Enter the LegalName");
		return;
}*/
if(lead.WorkPhone == null)
{
	DialogService.ShowMessage("Enter the WorkPhone");
		return;
}
if(lead.FirstName == null)
{
	DialogService.ShowMessage("Enter the Name");
		return;
}
if (lead.Products.Count <= 0)
{
    DialogService.ShowMessage("Product Required...");
    return;
}
string qry = "Select Account From Account where Account = '" + txtCompany.Text + "'";
Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
System.Data.DataTable dt = new System.Data.DataTable();
dataAdapterObj.Fill(dt);
if (dt.Rows.Count > 0)
{
    DialogService.ShowMessage("This Company Name is already exists");
    return;
}

if (Session["LeadAddressid"] != null)
{
    
    Sage.Entity.Interfaces.ILeadAddress objadd = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadAddress>(Session["LeadAddressid"].ToString());
    if (objadd != null)
    {
//////////////Specify the Query for find BM///////////
		qry = "Select CPINCODE from VWPINCODEMASTER where CPINCODE ='" + objadd.PostalCode.ToString() + "'";
			
		dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
		dt = new System.Data.DataTable();
		dataAdapterObj.Fill(dt);
		if (dt.Rows.Count > 0)
	    {	
			qry = "Select distinct Q.QUALIFIERID From QUALIFIERANDSMPINCODE Q, VWPINCODEMASTER VW,VWAREAMASTER VA " +
				"where VA.cscrcd = VW.cscrcd AND VA.CBranch = Q.Branch AND VW.CPINCODE = '" + objadd.PostalCode.ToString() + "'";


			//Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
			//System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
			dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
			dt = new System.Data.DataTable();
			dataAdapterObj.Fill(dt);
			if (dt.Rows.Count > 0)
		    {
				Sage.Entity.Interfaces.IUser BM  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>((object)dt.Rows[0][0].ToString());
				//Sage.Entity.Interfaces.IUser BM  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser >((object)"ADMIN");
				lead.Qualifier = BM;
				lead.AccountManager = BM;
			}
			else
			{
		        DialogService.ShowMessage("Please map the Qualifier with pincode-" + objadd.PostalCode.ToString());
				return;
				 
			}
		}
		else
		{
			//qry = "select case when CPINCODE is null then (Select Q.QUALIFIERID  from QUALIFIERANDSMPINCODE Q " +
		     //           "where Q.PINCODE = '000000') else (Select Q.QUALIFIERID  from QUALIFIERANDSMPINCODE Q " +
		       //		"where Q.PINCODE = '" + objadd.PostalCode.ToString() + "') end QUALIFIERID from VWPINCODEMASTER where CPINCODE ='" + objadd.PostalCode.ToString() + "'";
			qry = "Select Q.QUALIFIERID  from QUALIFIERANDSMPINCODE Q " +
		                "where Q.PINCODE = 'XXX'";


			dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
			dt = new System.Data.DataTable();
			dataAdapterObj.Fill(dt);
			if (dt.Rows.Count > 0)
		    {
				Sage.Entity.Interfaces.IUser BM  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>((object)dt.Rows[0][0].ToString());
				lead.Qualifier = BM;
				lead.AccountManager = BM;
			}
			else
			{
		        DialogService.ShowMessage("Please map the Qualifier with pincode-Default");
				return;
				 
			}
		}
		
		
		System.Data.OleDb.OleDbDataAdapter dataAdapterObj2 = new System.Data.OleDb.OleDbDataAdapter("Select Optionvalue as DEFAULTSECCODEID from UserOptions where userid = '" + dt.Rows[0][0].ToString() + "' and Upper(name) ='INSERTSECCODEID'", conObj);
	    System.Data.DataTable dt2 = new System.Data.DataTable();
	    dataAdapterObj2.Fill(dt2);
	    if (dt2.Rows.Count > 0)
	    {
	        Sage.Entity.Interfaces.IOwner objowner = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOwner>((object)dt2.Rows[0]["DEFAULTSECCODEID"].ToString());
	        lead.Owner = objowner;
	    }
		else
		{
		}
		//Sage.Entity.Interfaces.IOwner objowner = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOwner>((object)"SYST00000001");
	    //lead.Owner = objowner;
		lead.Address = objadd;
		lead.Save();
		//lead.Address.LeadId = lead.Id.ToString();
		//lead.Address.Save();
		if(lead.Products.Count > 0)
		{
			foreach(Sage.Entity.Interfaces.ILeadProduct prd in lead.Products )
			{
				prd.Save();
			}
		}
		if(lead.Competitors.Count > 0)
		{
			foreach(Sage.Entity.Interfaces.ILeadCompetitor cmp in lead.Competitors)
			{
				cmp.Save();
			}	
		}
		
		lead.Save();
		
		Session.Remove("LeadAddressid");
		System.Web.HttpContext.Current.Response.Redirect(string.Format("Lead.aspx", "&modeid=Detail"));
	}
	else
	{
		DialogService.ShowMessage("Enter the Address");
		return;
	}
}
else
{
	DialogService.ShowMessage("Enter the Address");
		return;
}
	

	


}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 phnWorkPhone.TextChanged += new EventHandler(phnWorkPhone_ChangeAction);
cmdAddress.Click += new EventHandler(cmdAddress_ClickAction);
cmdShowMap.Click += new ImageClickEventHandler(cmdShowMap_ClickAction);
chkAutoSearch.CheckedChanged += new EventHandler(chkAutoSearch_ChangeAction);
cmdMatchingRecords.Click += new EventHandler(cmdMatchingRecords_ClickAction);
lkpLeadEmployee.LookupResultValueChanged += new EventHandler(lkpLeadEmployee_ChangeAction);
cmdSave.Click += new ImageClickEventHandler(cmdSave_ClickAction);
cmdSaveNew.Click += new ImageClickEventHandler(cmdSaveNew_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
ClientBindingMgr.UsePageExitWarning = false;
Sage.SalesLogix.Security.SLXUserService service = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IUserService>() as Sage.SalesLogix.Security.SLXUserService;
Sage.Platform.Application.Services.IUserOptionsService userOption = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Application.Services.IUserOptionsService>();
string val = userOption.GetCommonOption("AutoSearch", "General");
if ((val == "True") || (val == "T"))
    chkAutoSearch.Checked = true;
else
    chkAutoSearch.Checked = false;

Sage.Entity.Interfaces.ILead lead = BindingSource.Current as Sage.Entity.Interfaces.ILead;
Sage.Platform.Security.IUserService userService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IUserService>();

string currentUserId = userService.UserId;
Sage.Entity.Interfaces.IUser user = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>((object)currentUserId);



 string qry = "select case when CBU = 'DHL' then (Select LEADSOURCEID From LEADSOURCE LS where LS.DESCRIPTION = 'XBU') " +
		"else (Select LEADSOURCEID From LEADSOURCE LS where LS.DESCRIPTION = 'BDU') end, emp.CEMPLCODE " +
		"From usersecurity US,VWEMPMASTER emp where upper(emp.CEMPLCODE) = upper(US.USERCODE) and upper(US.USERID) ='" + user.Id.ToString().ToUpper() +  "'";
	
	Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
	System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
	System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
	System.Data.DataTable dt = new System.Data.DataTable();
	dataAdapterObj.Fill(dt);
	if(dt.Rows.Count > 0)
	{
		Sage.Entity.Interfaces.ILeadSource ls  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadSource>((object)dt.Rows[0][0].ToString());	
		lead.LeadSource = ls;
		lead.UserID = dt.Rows[0][1].ToString();
	}
	else
	{
		Sage.Entity.Interfaces.ILeadSource ld = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadSource>((object)"LDEMOA000003");	
		lead.LeadSource = ld;
	}
	if(!Page.IsPostBack)
	{
		if (Session["LeadAddressid"] != null)
	    {
			Sage.Entity.Interfaces.ILeadAddress ad = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadAddress>(Session["LeadAddressid"].ToString());
	        ad.Delete();
			Session.Remove("LeadAddressid");
		}
	}
	
/*if (Session["LeadAddressid"] != null)
{
    Sage.Entity.Interfaces.ILeadAddress objadd = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadAddress>(Session["LeadAddressid"].ToString());
	
    if (objadd != null)
    {
		
        string _add = objadd.Address1 + "," + objadd.Address2 + "," + objadd.Address3 + "\r\n";
        _add += objadd.City + "," + objadd.State + "," + objadd.Country + "\r\n";
        _add += objadd.PostalCode + "\r\n";
        _add += objadd.Latitude + "\r\n";
        _add += objadd.Logitude;
        txtAccountAddress.Text = _add;
    }
}*/
txtCompany_lbl.ForeColor = System.Drawing.Color.Red;
//txtLegalName_lbl.ForeColor = System.Drawing.Color.Red;
phnWorkPhone_lbl.ForeColor = System.Drawing.Color.Red;
nmeLeadName_lbl.ForeColor = System.Drawing.Color.Red;	

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
ClientBindingMgr.SetFocusTo(nmeLeadName);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new InsertLeadAdapter(this)); }
}

public class InsertLeadAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IInsertLead
{
    public InsertLeadAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IPersonNameControl _nmeLeadName;
    public  Sage.Platform.Controls.IPersonNameControl nmeLeadName
    {
        get { return FindControl(ref _nmeLeadName, "nmeLeadName"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtCompany;
    public  Sage.Platform.Controls.ITextBoxControl txtCompany
    {
        get { return FindControl(ref _txtCompany, "txtCompany"); }
    }
    private Sage.Platform.Controls.IEmailControl _emlEmail;
    public  Sage.Platform.Controls.IEmailControl emlEmail
    {
        get { return FindControl(ref _emlEmail, "emlEmail"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklTitle;
    public  Sage.Platform.Controls.IPickListControl pklTitle
    {
        get { return FindControl(ref _pklTitle, "pklTitle"); }
    }
    private Sage.Platform.Controls.INumericControl _txtBusinessPotential;
    public  Sage.Platform.Controls.INumericControl txtBusinessPotential
    {
        get { return FindControl(ref _txtBusinessPotential, "txtBusinessPotential"); }
    }
    private Sage.Platform.Controls.IControlsListControl _QFControlsList;
    public  Sage.Platform.Controls.IControlsListControl QFControlsList
    {
        get { return FindControl(ref _QFControlsList, "QFControlsList"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdAddress;
    public  Sage.Platform.Controls.IButtonControl cmdAddress
    {
        get { return FindControl(ref _cmdAddress, "cmdAddress"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdShowMap;
    public  Sage.Platform.Controls.IButtonControl cmdShowMap
    {
        get { return FindControl(ref _cmdShowMap, "cmdShowMap"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtAccountAddress;
    public  Sage.Platform.Controls.ITextBoxControl txtAccountAddress
    {
        get { return FindControl(ref _txtAccountAddress, "txtAccountAddress"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdMatchingRecords;
    public  Sage.Platform.Controls.IButtonControl cmdMatchingRecords
    {
        get { return FindControl(ref _cmdMatchingRecords, "cmdMatchingRecords"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtComments;
    public  Sage.Platform.Controls.ITextBoxControl txtComments
    {
        get { return FindControl(ref _txtComments, "txtComments"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtAnyInfo;
    public  Sage.Platform.Controls.ITextBoxControl txtAnyInfo
    {
        get { return FindControl(ref _txtAnyInfo, "txtAnyInfo"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpLeadEmployee;
    public  Sage.Platform.Controls.ILookupControl lkpLeadEmployee
    {
        get { return FindControl(ref _lkpLeadEmployee, "lkpLeadEmployee"); }
    }
    private Sage.Platform.Controls.IUserControl _lkpQualifier;
    public  Sage.Platform.Controls.IUserControl lkpQualifier
    {
        get { return FindControl(ref _lkpQualifier, "lkpQualifier"); }
    }
    private Sage.Platform.Controls.IUserControl _lkpBranchManager;
    public  Sage.Platform.Controls.IUserControl lkpBranchManager
    {
        get { return FindControl(ref _lkpBranchManager, "lkpBranchManager"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklIndustry;
    public  Sage.Platform.Controls.IPickListControl pklIndustry
    {
        get { return FindControl(ref _pklIndustry, "pklIndustry"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtLegalName;
    public  Sage.Platform.Controls.ITextBoxControl txtLegalName
    {
        get { return FindControl(ref _txtLegalName, "txtLegalName"); }
    }
    private Sage.Platform.Controls.IPhoneControl _phnWorkPhone;
    public  Sage.Platform.Controls.IPhoneControl phnWorkPhone
    {
        get { return FindControl(ref _phnWorkPhone, "phnWorkPhone"); }
    }
    private Sage.Platform.Controls.IPhoneControl _phnTollFree;
    public  Sage.Platform.Controls.IPhoneControl phnTollFree
    {
        get { return FindControl(ref _phnTollFree, "phnTollFree"); }
    }
    private Sage.Platform.Controls.IUrlControl _urlWebAddress;
    public  Sage.Platform.Controls.IUrlControl urlWebAddress
    {
        get { return FindControl(ref _urlWebAddress, "urlWebAddress"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklStatus;
    public  Sage.Platform.Controls.IPickListControl pklStatus
    {
        get { return FindControl(ref _pklStatus, "pklStatus"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkAutoSearch;
    public  Sage.Platform.Controls.ICheckBoxControl chkAutoSearch
    {
        get { return FindControl(ref _chkAutoSearch, "chkAutoSearch"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtBusinessDescription;
    public  Sage.Platform.Controls.ITextBoxControl txtBusinessDescription
    {
        get { return FindControl(ref _txtBusinessDescription, "txtBusinessDescription"); }
    }
    private Sage.Platform.Controls.IAddressControl _adrAddress;
    public  Sage.Platform.Controls.IAddressControl adrAddress
    {
        get { return FindControl(ref _adrAddress, "adrAddress"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtInterests;
    public  Sage.Platform.Controls.ITextBoxControl txtInterests
    {
        get { return FindControl(ref _txtInterests, "txtInterests"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueLeadSource;
    public  Sage.Platform.Controls.ILookupControl lueLeadSource
    {
        get { return FindControl(ref _lueLeadSource, "lueLeadSource"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtpQualifiedOn;
    public  Sage.Platform.Controls.IDateTimePickerControl dtpQualifiedOn
    {
        get { return FindControl(ref _dtpQualifiedOn, "dtpQualifiedOn"); }
    }
    private Sage.Platform.Controls.IOwnerControl _ownOwner;
    public  Sage.Platform.Controls.IOwnerControl ownOwner
    {
        get { return FindControl(ref _ownOwner, "ownOwner"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtSICCode;
    public  Sage.Platform.Controls.ITextBoxControl txtSICCode
    {
        get { return FindControl(ref _txtSICCode, "txtSICCode"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdSave;
    public  Sage.Platform.Controls.IButtonControl cmdSave
    {
        get { return FindControl(ref _cmdSave, "cmdSave"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdSaveNew;
    public  Sage.Platform.Controls.IButtonControl cmdSaveNew
    {
        get { return FindControl(ref _cmdSaveNew, "cmdSaveNew"); }
    }

}

</script>

<script type="text/javascript">
</script>
