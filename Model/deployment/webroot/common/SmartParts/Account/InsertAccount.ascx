<%@ Control Language="C#" ClassName="InsertAccount" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="33.33333%" />
            <col width="33.33333%" />
            <col width="33.33333%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="AccountName_lbl" AssociatedControlID="AccountName" runat="server" Text="<%$ resources: AccountName.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="AccountName"  dojoType="Sage.UI.Controls.TextBox" MaxLength="128"  />
  </div>

      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtLegalName_lbl" AssociatedControlID="txtLegalName" runat="server" Text="<%$ resources: txtLegalName.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtLegalName"  dojoType="Sage.UI.Controls.TextBox" MaxLength="128"  />
  </div>

      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="MainPhone_lbl" AssociatedControlID="MainPhone" runat="server" Text="<%$ resources: MainPhone.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="MainPhone"
 />
  </div>

      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="WebAddress_lbl" AssociatedControlID="WebAddress" runat="server" Text="<%$ resources: WebAddress.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:URL runat="server" ID="WebAddress" URLTextBoxStyle-ForeColor="#000099" URLTextBoxStyle-Font-Underline="false" />
  </div>

      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  colspan="3" >
<div class="mainContentHeader2"><span id="QFHorizontalSeparator" 	>
<asp:Localize runat="server" Text="<%$ resources: QFHorizontalSeparator.Caption %>"   >Account Information</asp:Localize></span></div>


      </td>
                  </tr>
<tr>
            <td  >
<asp:Panel runat="server" ID="QFControlsList" CssClass="controlslist "
>
   <asp:LinkButton runat="server" ID="cmdAddress"
 Text="<%$ resources: cmdAddress.Caption %>"  />
 
   <asp:ImageButton runat="server" ID="cmdShowMap"
 ToolTip="<%$ resources: cmdShowMap.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Get_Map_16x16"  />
 
</asp:Panel>
      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Fax_lbl" AssociatedControlID="Fax" runat="server" Text="<%$ resources: Fax.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="Fax"
MaxLength="32"  />
  </div>

      </td>
                <td  >
<div class="dependency">
<SalesLogix:DependencyLookupControl runat="server" ID="ddlMKTSG"  LabelCssClass="lbl"  >
<LookupResultsHeaderStyle BackColor="ActiveCaption" Font-Bold="True" ForeColor="White" />
<LookupDialogStyle BackColor="ButtonFace" />
<LookupResultsStyle CellPadding="4" ForeColor="Black" />
<DependentLookups>
 <SalesLogix:DependentLookup LookupEntityName="Indsgmst" LookupEntityTypeName="${lookup.LookupEntityTypeName}" DropDownDisplayProperty="Cindsgdesc" ParentProperty="" PropertyDisplay="<%$ resources: ddlMKTSG.DependentLookups.Cindsgdesc.PropertyDisplay %>" BindingPropertyName="Industry">
  </SalesLogix:DependentLookup>
 <SalesLogix:DependentLookup LookupEntityName="Indsgmst" LookupEntityTypeName="Sage.Entity.Interfaces.IIndsgmst, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" DropDownDisplayProperty="Cmktsgdesc" ParentProperty="Cindsgdesc" PropertyDisplay="<%$ resources: ddlMKTSG.DependentLookups.Cmktsgdesc.PropertyDisplay %>" BindingPropertyName="MktSegment">
  </SalesLogix:DependentLookup>
  </DependentLookups>
  <LookupPreFilters>
      </LookupPreFilters>
</SalesLogix:DependencyLookupControl>
</div>

      </td>
      </tr>
<tr>
            <td rowspan="4"  >
 <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtAccountAddress" Enabled="false"  Rows="4" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklType_lbl" AssociatedControlID="pklType" runat="server" Text="<%$ resources: pklType.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklType" ReadOnly="true" PickListName="Account Type" AutoPostBack="true" NoneEditable="true"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
                  <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Status_lbl" AssociatedControlID="Status" runat="server" Text="<%$ resources: Status.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="Status" ReadOnly="true" PickListName="Account Status" MustExistInList="false" AlphaSort="true"  />
  </div>

      </td>
                <td rowspan="2"  >
 <div class=" lbl alignleft" >
   <asp:Label ID="BusinessDescription_lbl" AssociatedControlID="BusinessDescription" runat="server" Text="<%$ resources: BusinessDescription.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="BusinessDescription"  Rows="3" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
      </tr>
<tr>
                  <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklSubType_lbl" AssociatedControlID="pklSubType" runat="server" Text="<%$ resources: pklSubType.Caption %>" Visible="false" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklSubType" MustExistInList="false" Visible="false"  />
  </div>

      </td>
            </tr>
<tr>
                  <td></td>
                <td></td>
      </tr>
<tr>
            <td  colspan="3" >
  <hr />
 

      </td>
                  </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="AccountManager_lbl" AssociatedControlID="AccountManager" runat="server" Text="<%$ resources: AccountManager.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:SlxUserControl runat="server" ID="AccountManager" ButtonToolTip="<%$ resources: AccountManager.ButtonToolTip %>"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Owner_lbl" AssociatedControlID="Owner" runat="server" Text="<%$ resources: Owner.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
<SalesLogix:OwnerControl runat="server" ID="Owner" ButtonToolTip="<%$ resources: Owner.ButtonToolTip %>" Types="$qfcontrol.Types"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="LeadSource_lbl" AssociatedControlID="LeadSource" runat="server" Text="<%$ resources: LeadSource.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="LeadSource" ButtonToolTip="<%$ resources: LeadSource.ButtonToolTip %>" Enabled="false" LookupEntityName="LeadSource" LookupEntityTypeName="Sage.Entity.Interfaces.ILeadSource, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: LeadSource.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: LeadSource.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: LeadSource.LookupProperties.AbbrevDescription.PropertyHeader %>" PropertyName="AbbrevDescription" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: LeadSource.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="Status" PropertyType="System.String" OperatorCode="=" Visible="False"
 FilterValue="<%$ resources: LeadSource.LUPF.Status %>"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="InsertAccount_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="btnSave"
 AlternateText="<%$ resources: btnSave.Caption %>"  ToolTip="<%$ resources: btnSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=InsertAccount&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkInsertAccountHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="InsertAccount" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IAccount); }
}

 

protected override void OnAddEntityBindings() {
                 // AccountName.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding AccountNameTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AccountName", AccountName, "Text");
        BindingSource.Bindings.Add(AccountNameTextBinding);
                    // txtLegalName.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtLegalNameTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LegalName", txtLegalName, "Text");
        BindingSource.Bindings.Add(txtLegalNameTextBinding);
                    // MainPhone.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding MainPhoneTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("MainPhone", MainPhone, "Text");
        BindingSource.Bindings.Add(MainPhoneTextBinding);
                    // WebAddress.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding WebAddressTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("WebAddress", WebAddress, "Text");
        BindingSource.Bindings.Add(WebAddressTextBinding);
                                // Fax.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding FaxTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Fax", Fax, "Text");
        BindingSource.Bindings.Add(FaxTextBinding);
      BindingSource.AddBindingProvider(ddlMKTSG as Sage.Platform.EntityBinding.IEntityBindingProvider);
                 // ddlMKTSG.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ddlMKTSGTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Industry", ddlMKTSG, "Text");
        BindingSource.Bindings.Add(ddlMKTSGTextBinding);
                       // pklType.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklTypePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Type", pklType, "PickListValue");
        BindingSource.Bindings.Add(pklTypePickListValueBinding);
                    // Status.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding StatusPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Status", Status, "PickListValue");
        BindingSource.Bindings.Add(StatusPickListValueBinding);
                    // BusinessDescription.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding BusinessDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("BusinessDescription", BusinessDescription, "Text");
        BindingSource.Bindings.Add(BusinessDescriptionTextBinding);
                    // pklSubType.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklSubTypePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SubType", pklSubType, "PickListValue");
        BindingSource.Bindings.Add(pklSubTypePickListValueBinding);
                       // AccountManager.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding AccountManagerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AccountManager", AccountManager, "LookupResultValue");
        BindingSource.Bindings.Add(AccountManagerLookupResultValueBinding);
                    // Owner.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding OwnerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Owner", Owner, "LookupResultValue");
        BindingSource.Bindings.Add(OwnerLookupResultValueBinding);
                    // LeadSource.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding LeadSourceLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LeadSource", LeadSource, "LookupResultValue");
        BindingSource.Bindings.Add(LeadSourceLookupResultValueBinding);
    
   
    }
                                                                                                                                     
protected void cmdAddress_ClickAction(object sender, EventArgs e) {
if (DialogService != null)
{
	//string _idname = lead.Address.Id.ToString() + ",Lead,"+lead.Id.ToString();
    //Session["LeadAddressid"] = _idname;
    DialogService.SetSpecs(200, 200, 440, 300, "AddAccountAddress", "", true);
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.IAddress);		
    DialogService.ShowDialog();
}

}
protected void cmdShowMap_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ILead lead = BindingSource.Current as Sage.Entity.Interfaces.ILead;
string url= "http://maps.google.com/maps?q="+ lead.Address.Latitude +"," +lead.Address.Logitude;
ScriptManager.RegisterStartupScript(Page, typeof(Page), "ShowMap", "window.open('" + url + "');",true);


}
protected void btnSave_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IAccount account = BindingSource.Current as Sage.Entity.Interfaces.IAccount;
if(account.AccountName == null)
{
	DialogService.ShowMessage("Enter the AccountName...");
	return;
}
if(account.MainPhone == null)
{
	DialogService.ShowMessage("Enter the MainPhone...");
	return;
}
string qry = "Select Account From Account where Account = '" + AccountName.Text.Trim() + "'";
Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
System.Data.DataTable dt = new System.Data.DataTable();
dataAdapterObj.Fill(dt);
if (dt.Rows.Count > 0)
{
    DialogService.ShowMessage("This Account is already exists");
    return;
}			
qry = "select LegalCompanyName from LegalMaster where LegalCompanyName ='" + txtLegalName.Text.Trim() + "'";
dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
dt = new System.Data.DataTable();
dataAdapterObj.Fill(dt);
if (dt.Rows.Count > 0)
{
    DialogService.ShowMessage("This legal Entity is already exists");
    return;
}

Sage.Entity.Interfaces.IAddress objadd=null;
if (Session["Addressid"] != null)
{
    objadd = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IAddress>(Session["Addressid"].ToString());           
    account.Address = objadd;
	account.Save();
	objadd.EntityId = account.Id.ToString(); 
	Session.Remove("Addressid");
	objadd.Save(); 	
	Response.Redirect(string.Format("Account.aspx?entityId={0}",account.Id.ToString() ));	
	//System.Web.HttpContext.Current.Response.Redirect(string.Format("Account.aspx?modeid=Detail"));
}
else
{
	DialogService.ShowMessage("Enter the Address");
	return;
}


}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 cmdAddress.Click += new EventHandler(cmdAddress_ClickAction);
cmdShowMap.Click += new ImageClickEventHandler(cmdShowMap_ClickAction);
btnSave.Click += new ImageClickEventHandler(btnSave_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
     Sage.Entity.Interfaces.IAccount account = this.BindingSource.Current as Sage.Entity.Interfaces.IAccount;
     pklSubType.PickListName = account.GetSubTypePickListName();
	
	AccountName_lbl.ForeColor = System.Drawing.Color.Red;
	MainPhone_lbl.ForeColor = System.Drawing.Color.Red;
	
	
	if(!Page.IsPostBack)
	{
		
		Sage.Platform.Security.IUserService userService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IUserService>();

		string currentUserId = userService.UserId;
		Sage.Entity.Interfaces.IUser user = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>((object)currentUserId);
		

		 string qry = "select case when userID is null then (Select LEADSOURCEID From LEADSOURCE LS where LS.DESCRIPTION = 'XBU') " +
			"else (Select LEADSOURCEID From LEADSOURCE LS where LS.DESCRIPTION = 'BDU') end " +
			"From usersecurity US,VWEMPMASTER emp where emp.CEMPLCODE = US.USERCODE and US.USERID ='" + user.Id +  "'";
		
		Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
		System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
		System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
		System.Data.DataTable dt = new System.Data.DataTable();
		dataAdapterObj.Fill(dt);
		if(dt.Rows.Count > 0)
		{
			Sage.Entity.Interfaces.ILeadSource ls  = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadSource>((object)dt.Rows[0][0].ToString());	
			account.LeadSource = ls;
		}
		else
		{
			Sage.Entity.Interfaces.ILeadSource ld = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILeadSource>((object)"LDEMOA000003");	
			account.LeadSource = ld;
		}
	}
	if (Session["Addressid"] != null)
    {
        Sage.Entity.Interfaces.IAddress objadd = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IAddress>(Session["Addressid"].ToString());
        if (objadd != null)
        {
            string _add = objadd.Address1 + "," + objadd.Address2 + "," + objadd.Address3 + "\r\n";
            _add += objadd.City + "," + objadd.State + "," + objadd.Country + "\r\n";
            _add += objadd.PostalCode + "\r\n";
            //_add += objadd.Latitude + "\r\n";
            //_add += objadd.Logitude;
            txtAccountAddress.Text = _add;
        }
    }

}
protected override void OnFormBound()
{
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
quickformload0(this, EventArgs.Empty);
ClientBindingMgr.SetFocusTo(AccountName);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new InsertAccountAdapter(this)); }
}

public class InsertAccountAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IInsertAccount
{
    public InsertAccountAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ITextBoxControl _AccountName;
    public  Sage.Platform.Controls.ITextBoxControl AccountName
    {
        get { return FindControl(ref _AccountName, "AccountName"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtLegalName;
    public  Sage.Platform.Controls.ITextBoxControl txtLegalName
    {
        get { return FindControl(ref _txtLegalName, "txtLegalName"); }
    }
    private Sage.Platform.Controls.IPhoneControl _MainPhone;
    public  Sage.Platform.Controls.IPhoneControl MainPhone
    {
        get { return FindControl(ref _MainPhone, "MainPhone"); }
    }
    private Sage.Platform.Controls.IUrlControl _WebAddress;
    public  Sage.Platform.Controls.IUrlControl WebAddress
    {
        get { return FindControl(ref _WebAddress, "WebAddress"); }
    }
    private Sage.Platform.Controls.IControlsListControl _QFControlsList;
    public  Sage.Platform.Controls.IControlsListControl QFControlsList
    {
        get { return FindControl(ref _QFControlsList, "QFControlsList"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdAddress;
    public  Sage.Platform.Controls.IButtonControl cmdAddress
    {
        get { return FindControl(ref _cmdAddress, "cmdAddress"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdShowMap;
    public  Sage.Platform.Controls.IButtonControl cmdShowMap
    {
        get { return FindControl(ref _cmdShowMap, "cmdShowMap"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtAccountAddress;
    public  Sage.Platform.Controls.ITextBoxControl txtAccountAddress
    {
        get { return FindControl(ref _txtAccountAddress, "txtAccountAddress"); }
    }
    private Sage.Platform.Controls.IUserControl _AccountManager;
    public  Sage.Platform.Controls.IUserControl AccountManager
    {
        get { return FindControl(ref _AccountManager, "AccountManager"); }
    }
    private Sage.Platform.Controls.IPhoneControl _Fax;
    public  Sage.Platform.Controls.IPhoneControl Fax
    {
        get { return FindControl(ref _Fax, "Fax"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklType;
    public  Sage.Platform.Controls.IPickListControl pklType
    {
        get { return FindControl(ref _pklType, "pklType"); }
    }
    private Sage.Platform.Controls.IPickListControl _Status;
    public  Sage.Platform.Controls.IPickListControl Status
    {
        get { return FindControl(ref _Status, "Status"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklSubType;
    public  Sage.Platform.Controls.IPickListControl pklSubType
    {
        get { return FindControl(ref _pklSubType, "pklSubType"); }
    }
    private Sage.Platform.Controls.IOwnerControl _Owner;
    public  Sage.Platform.Controls.IOwnerControl Owner
    {
        get { return FindControl(ref _Owner, "Owner"); }
    }
    private Sage.Platform.Controls.IDependencyLookupControl _ddlMKTSG;
    public  Sage.Platform.Controls.IDependencyLookupControl ddlMKTSG
    {
        get { return FindControl(ref _ddlMKTSG, "ddlMKTSG"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _BusinessDescription;
    public  Sage.Platform.Controls.ITextBoxControl BusinessDescription
    {
        get { return FindControl(ref _BusinessDescription, "BusinessDescription"); }
    }
    private Sage.Platform.Controls.ILookupControl _LeadSource;
    public  Sage.Platform.Controls.ILookupControl LeadSource
    {
        get { return FindControl(ref _LeadSource, "LeadSource"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnSave;
    public  Sage.Platform.Controls.IButtonControl btnSave
    {
        get { return FindControl(ref _btnSave, "btnSave"); }
    }

}

</script>

<script type="text/javascript">
</script>
