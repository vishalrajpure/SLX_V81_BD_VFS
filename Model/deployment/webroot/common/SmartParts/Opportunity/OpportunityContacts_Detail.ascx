<%@ Control Language="C#" ClassName="OpportunityContacts_Detail" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <div class="mainContentHeader"><asp:Label ID="grdOppContacts_lbl" AssociatedControlID="grdOppContacts" runat="server" Text="<%$ resources: grdOppContacts.Caption %>" ></asp:Label></div>
<SalesLogix:SlxGridView runat="server" ID="grdOppContacts" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="10" OnPageIndexChanging="grdOppContactspage_changing" EmptyTableRowText="<%$ resources: grdOppContacts.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdOppContacts_RowCommand"
 DataKeyNames="InstanceId,Id"
 AllowSorting="true" OnSorting="grdOppContacts_Sorting"  OnRowEditing="grdOppContacts_RowEditing"  OnRowDeleting="grdOppContacts_RowDeleting" OnRowDataBound="grdOppContacts_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:BoundField DataField="Contact.NameLF"
      HeaderText="<%$ resources: grdOppContacts.dee29184-964d-4b80-9665-c6588f28be58.ColumnHeading %>"       SortExpression="Contact.NameLF"    >
      </asp:BoundField>
    <asp:BoundField DataField="Contact.Title"
      HeaderText="<%$ resources: grdOppContacts.387ab373-6251-4066-a6a4-f62e43f6c507.ColumnHeading %>"       SortExpression="Contact.Title"    >
      </asp:BoundField>
    <asp:BoundField DataField="SalesRole"
      HeaderText="<%$ resources: grdOppContacts.91df61c9-bfa0-4b34-b33f-d9bcfbfb0903.ColumnHeading %>"       SortExpression="SalesRole"    >
      </asp:BoundField>
    <asp:CheckBoxField DataField="Contact.IsPrimary" ReadOnly="True"
      HeaderText="<%$ resources: grdOppContacts.ce453213-3bc0-42a0-8545-26a9ad5985f5.ColumnHeading %>"        >
          </asp:CheckBoxField>
    <asp:BoundField DataField="Contact.WorkPhone"
      HeaderText="<%$ resources: grdOppContacts.5e43cda9-9a5e-4a9f-99ce-54829b4244a9.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="Contact.Email"
      HeaderText="<%$ resources: grdOppContacts.8b2a3dea-a970-474d-b3d0-8d51563bd14a.ColumnHeading %>"          >
      </asp:BoundField>
  <asp:ButtonField CommandName="Edit"
  Text="<%$ resources: grdOppContacts.47b79b74-6484-4b2b-94fd-978b86cd3bc2.Text %>"               >
          </asp:ButtonField>
      
     <asp:ButtonField CommandName="Delete"
  Text="<%$ resources: grdOppContacts.e1e41ffc-1494-4188-bcc8-83cf568985dc.Text %>"                >
          </asp:ButtonField>
      
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                        private int _grdOppContactsdeleteColumnIndex = -2;
protected int grdOppContactsDeleteColumnIndex
{
    get
    {
        if (_grdOppContactsdeleteColumnIndex == -2)
        {
            int bias = (grdOppContacts.ExpandableRows) ? 1 : 0;
            _grdOppContactsdeleteColumnIndex = -1;
            int colcount = 0;
            foreach (DataControlField col in grdOppContacts.Columns)
            {
                ButtonField btn = col as ButtonField;
                if (btn != null)
                {
                    if (btn.CommandName == "Delete")
                    {
                        _grdOppContactsdeleteColumnIndex = colcount + bias;
                        break;
                    }
                }
                colcount++;
            }
        }
        return _grdOppContactsdeleteColumnIndex;
    }
}

protected void grdOppContacts_RowDataBound(object sender, GridViewRowEventArgs e)
{
    if (e.Row.RowType == DataControlRowType.DataRow)
    {
        if ((grdOppContactsDeleteColumnIndex >= 0) && (grdOppContactsDeleteColumnIndex < e.Row.Cells.Count))
        {
            TableCell cell = e.Row.Cells[grdOppContactsDeleteColumnIndex];
            foreach (Control c in cell.Controls)
            {
                LinkButton btn = c as LinkButton;
                if (btn != null)
                {
                    btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdOppContacts.e1e41ffc-1494-4188-bcc8-83cf568985dc.ConfirmationMessage").ToString()) + "');");
                    return;
                }
            }
        }
    }
}
   
protected void grdOppContactspage_changing(object sender, GridViewPageEventArgs e)
{
 grdOppContacts.PageIndex = e.NewPageIndex;
 grdOppContacts.DataBind();
}
protected void grdOppContacts_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdOppContacts_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsOpportunityContacts.SelectedIndex = rowIndex;
        object currentEntity = dsOpportunityContacts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (grdOppContacts.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdOppContacts.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsOpportunityContacts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = dsOpportunityContacts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdOppContacts.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
                // QFDataGrid
                            DialogService.SetSpecs(400, 600, "EditOpportunityContact", string.Empty );
                            DialogService.EntityType = typeof(Sage.Entity.Interfaces.IOpportunityContact );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
        if (e.CommandName.Equals("Delete"))
        {
            Sage.Entity.Interfaces.IOpportunity mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
            if (mainentity != null)
            {
                Sage.Entity.Interfaces.IOpportunityContact childEntity = null;
                if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IOpportunityContact))
                {
                    childEntity = (Sage.Entity.Interfaces.IOpportunityContact)currentEntity;
                }
                else if (id != null)
                {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOpportunityContact>(id);
            }
                if(childEntity != null)
                {
                     mainentity.Contacts.Remove(childEntity);

                     if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
                     {
                         childEntity.Delete();
                     }
                     dsOpportunityContacts.SelectedIndex = -1;
                }
            }
        }
    }
    grdOppContacts_refresh();
}
    protected void grdOppContacts_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

        protected void grdOppContacts_RowEditing(object sender, GridViewEditEventArgs e)
    {
        grdOppContacts.SelectedIndex = e.NewEditIndex;
        e.Cancel = true;
    }
            protected void grdOppContacts_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        grdOppContacts.SelectedIndex = -1;
    }
    </script>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="OpportunityContacts_Detail_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAssociateContacts" LookupEntityName="Contact" LookupEntityTypeName="Sage.Entity.Interfaces.IContact, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateContacts.LookupProperties.NameLF.PropertyHeader %>" PropertyName="NameLF" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateContacts.LookupProperties.Email.PropertyHeader %>" PropertyName="Email" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateContacts.LookupProperties.Title.PropertyHeader %>" PropertyName="Title" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateContacts.LookupProperties.WorkPhone.PropertyHeader %>" PropertyName="WorkPhone" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
 

  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=OpportunityContacts_Detail&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkOpportunityContacts_DetailHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="OpportunityContacts_Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IOpportunity); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsOpportunityContacts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsOpportunityContacts
{ 
  get 
  {
    if (_dsOpportunityContacts == null)
    {
             _dsOpportunityContacts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IOpportunityContact), 
	    EntityType              ,"Contacts", System.Reflection.MemberTypes.Property);
                   _dsOpportunityContacts.UseSmartQuery = true;
      	   	}
 	return _dsOpportunityContacts;
  }
}

void dsOpportunityContacts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsOpportunityContacts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsOpportunityContacts);
   }
}

 



 

protected override void OnAddEntityBindings() {
       dsOpportunityContacts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Contacts", grdOppContacts ));
   dsOpportunityContacts.BindFieldNames = new String[] { "Id","Contact.NameLF","Contact.Title","SalesRole","Contact.IsPrimary","Contact.WorkPhone","Contact.Email" };
                
     BindingSource.OnCurrentEntitySet += new EventHandler(dsOpportunityContacts_OnCurrentEntitySet);
    
    }
       
protected void lueAssociateContacts_ChangeAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("OpportunityContacts_Detail.lueAssociateContacts_OnChange", methodArgs);

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAssociateContacts.LookupResultValueChanged += new EventHandler(lueAssociateContacts_ChangeAction);


}

protected void quickformload0(object sender, EventArgs e) {

Sage.Entity.Interfaces.IOpportunity objOpp = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
string _UserId = "", AccManager = "";
Sage.Platform.Security.IUserService _IUserService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IUserService>();
_UserId = _IUserService.UserId; //get login Userid
if(objOpp.AccountManager != null)
{
	AccManager = Convert.ToString(objOpp.AccountManager.Id);

	if ((AccManager.Trim() == _UserId.Trim() || Convert.ToString(objOpp.Account.AccountManager.Id) == _UserId.Trim()) && (objOpp.Status != "Closed - Won" && objOpp.Status.ToUpper() != "LOST" && objOpp.Status.ToUpper() != "DROPPED"))
	{
		lueAssociateContacts.Visible = true;
		grdOppContacts.Enabled = true;
	}
	else
	{
		lueAssociateContacts.Visible = false;
		grdOppContacts.Enabled = false;
	}
}



}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
grdOppContacts.Columns[6].Visible = (RoleSecurityService.HasAccess("Entities/Opportunity/Edit"));
grdOppContacts.Columns[7].Visible = (RoleSecurityService.HasAccess("Entities/Opportunity/Edit"));
ClientBindingMgr.RegisterBoundControl(lueAssociateContacts);

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (dsOpportunityContacts.SourceObject == null) { dsOpportunityContacts.SourceObject = BindingSource.Current; }
if (dsOpportunityContacts.SourceObject == null) { RegisterBindingsWithClient(dsOpportunityContacts); }
dsOpportunityContacts.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new OpportunityContacts_DetailAdapter(this)); }
}

public class OpportunityContacts_DetailAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IOpportunityContacts_Detail
{
    public OpportunityContacts_DetailAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IDataGridControl _grdOppContacts;
    public  Sage.Platform.Controls.IDataGridControl grdOppContacts
    {
        get { return FindControl(ref _grdOppContacts, "grdOppContacts"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dsOpportunityContacts;
    public  Sage.Platform.Controls.IDataSourceControl dsOpportunityContacts
    {
        get { return FindControl(ref _dsOpportunityContacts, "dsOpportunityContacts"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueAssociateContacts;
    public  Sage.Platform.Controls.ILookupControl lueAssociateContacts
    {
        get { return FindControl(ref _lueAssociateContacts, "lueAssociateContacts"); }
    }

    public  void lueAssociateContacts_OnChange(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("OpportunityContacts_Detail.lueAssociateContacts_OnChange", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
