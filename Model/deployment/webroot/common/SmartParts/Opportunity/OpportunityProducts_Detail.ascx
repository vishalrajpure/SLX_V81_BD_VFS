<%@ Control Language="C#" ClassName="OpportunityProducts_Detail" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <div class="mainContentHeader"><asp:Label ID="grdOppProducts_lbl" AssociatedControlID="grdOppProducts" runat="server" Text="<%$ resources: grdOppProducts.Caption %>" ></asp:Label></div>
<SalesLogix:SlxGridView runat="server" ID="grdOppProducts" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="10" OnPageIndexChanging="grdOppProductspage_changing" EmptyTableRowText="<%$ resources: grdOppProducts.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdOppProducts_RowCommand"
 DataKeyNames="InstanceId,Id"
 AllowSorting="true" OnSorting="grdOppProducts_Sorting"  OnRowDeleting="grdOppProducts_RowDeleting" OnRowDataBound="grdOppProducts_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:BoundField DataField="Product.Name"
      HeaderText="<%$ resources: grdOppProducts.73575528-875d-4d0f-9d3e-00a1e4bc9234.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="Product.Family"
      HeaderText="<%$ resources: grdOppProducts.5918cb04-ad0a-49dc-9a16-1aabd5f3544f.ColumnHeading %>"          >
      </asp:BoundField>
   <asp:ButtonField CommandName="Delete"
  Text="<%$ resources: grdOppProducts.e1e41ffc-1494-4188-bcc8-83cf568985dc.Text %>"                >
          </asp:ButtonField>
      
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

         private int _grdOppProductsdeleteColumnIndex = -2;
protected int grdOppProductsDeleteColumnIndex
{
    get
    {
        if (_grdOppProductsdeleteColumnIndex == -2)
        {
            int bias = (grdOppProducts.ExpandableRows) ? 1 : 0;
            _grdOppProductsdeleteColumnIndex = -1;
            int colcount = 0;
            foreach (DataControlField col in grdOppProducts.Columns)
            {
                ButtonField btn = col as ButtonField;
                if (btn != null)
                {
                    if (btn.CommandName == "Delete")
                    {
                        _grdOppProductsdeleteColumnIndex = colcount + bias;
                        break;
                    }
                }
                colcount++;
            }
        }
        return _grdOppProductsdeleteColumnIndex;
    }
}

protected void grdOppProducts_RowDataBound(object sender, GridViewRowEventArgs e)
{
    if (e.Row.RowType == DataControlRowType.DataRow)
    {
        if ((grdOppProductsDeleteColumnIndex >= 0) && (grdOppProductsDeleteColumnIndex < e.Row.Cells.Count))
        {
            TableCell cell = e.Row.Cells[grdOppProductsDeleteColumnIndex];
            foreach (Control c in cell.Controls)
            {
                LinkButton btn = c as LinkButton;
                if (btn != null)
                {
                    btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdOppProducts.e1e41ffc-1494-4188-bcc8-83cf568985dc.ConfirmationMessage").ToString()) + "');");
                    return;
                }
            }
        }
    }
}
   
protected void grdOppProductspage_changing(object sender, GridViewPageEventArgs e)
{
 grdOppProducts.PageIndex = e.NewPageIndex;
 grdOppProducts.DataBind();
}
protected void grdOppProducts_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdOppProducts_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsOpportunityProducts.SelectedIndex = rowIndex;
        object currentEntity = dsOpportunityProducts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (grdOppProducts.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdOppProducts.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsOpportunityProducts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = dsOpportunityProducts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdOppProducts.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }
        if (e.CommandName.Equals("Delete"))
        {
            Sage.Entity.Interfaces.IOpportunity mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
            if (mainentity != null)
            {
                Sage.Entity.Interfaces.IOpportunityProduct childEntity = null;
                if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IOpportunityProduct))
                {
                    childEntity = (Sage.Entity.Interfaces.IOpportunityProduct)currentEntity;
                }
                else if (id != null)
                {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOpportunityProduct>(id);
            }
                if(childEntity != null)
                {
                     mainentity.Products.Remove(childEntity);

                     if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
                     {
                         childEntity.Delete();
                     }
                     dsOpportunityProducts.SelectedIndex = -1;
                }
            }
        }
    }
    grdOppProducts_refresh();
}
    protected void grdOppProducts_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

            protected void grdOppProducts_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        grdOppProducts.SelectedIndex = -1;
    }
    </script>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="OpportunityProducts_Detail_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAssociateProduct" LookupEntityName="Product" LookupEntityTypeName="Sage.Entity.Interfaces.IProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateProduct.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateProduct.LookupProperties.Family.PropertyHeader %>" PropertyName="Family" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateProduct.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
 

  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=OpportunityProducts_Detail&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkOpportunityProducts_DetailHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="OpportunityProducts_Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IOpportunity); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsOpportunityProducts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsOpportunityProducts
{ 
  get 
  {
    if (_dsOpportunityProducts == null)
    {
             _dsOpportunityProducts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IOpportunityProduct), 
	    EntityType              ,"Products", System.Reflection.MemberTypes.Property);
                   _dsOpportunityProducts.UseSmartQuery = true;
      	   	}
 	return _dsOpportunityProducts;
  }
}

void dsOpportunityProducts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsOpportunityProducts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsOpportunityProducts);
   }
}

 



 

protected override void OnAddEntityBindings() {
       dsOpportunityProducts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Products", grdOppProducts ));
   dsOpportunityProducts.BindFieldNames = new String[] { "Id","Product.Name","Product.Family" };
                
     BindingSource.OnCurrentEntitySet += new EventHandler(dsOpportunityProducts_OnCurrentEntitySet);
    
    }
       
protected void lueAssociateProduct_ChangeAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("OpportunityProducts_Detail.lueAssociateProduct_OnChange", methodArgs);

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAssociateProduct.LookupResultValueChanged += new EventHandler(lueAssociateProduct_ChangeAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.IOpportunity objOpp = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
string _UserId = "", AccManager = "";
Sage.Platform.Security.IUserService _IUserService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IUserService>();
_UserId = _IUserService.UserId; //get login Userid
if (objOpp.AccountManager != null)
{
	System.Collections.Hashtable keyPairs = new System.Collections.Hashtable();
    string iniPath = Server.MapPath(@"Temp") + "\\Config.ini";
    System.IO.TextReader
        iniFile = null;
    String strLine = null;
    String currentRoot = null;
    String[] keyPair = null;
    string Conn = "";


    if (System.IO.File.Exists(iniPath))
    {
        iniFile = new System.IO.StreamReader(iniPath);
        strLine = iniFile.ReadLine();
        while (strLine != null)
        {
            strLine = strLine.Trim();//.ToUpper();
            if (strLine != "")
            {
                if (strLine.StartsWith("[") && strLine.EndsWith("]"))
                {
                    currentRoot = strLine.Substring(1, strLine.Length - 2);
                }
                else
                {
                    keyPair = strLine.Split(new char[] { '=' }, 2);

                    if (keyPair[0].ToString() == "constr")
                    {
                        Conn = keyPair[1].ToString();
                        break;
                    }
                }
            }
            strLine = iniFile.ReadLine();
        }
        if (iniFile != null)
            iniFile.Close();

    }
    AccManager = Convert.ToString(objOpp.AccountManager.Id);
    string qry = "select  USERID from (select USERID,UserCode, nullif(MANAGERID,USERID) MANAGER from USERSECURITY) connect by nocycle prior MANAGER= USERID start with USERID = ('" + objOpp.Account.AccountManager.Id.ToString() + "')" +
				" UNION select  USERID from (select USERID,UserCode, nullif(MANAGERID,USERID) MANAGER from USERSECURITY) connect by nocycle prior MANAGER= USERID start with USERID = ('" + objOpp.AccountManager.Id.ToString() + "')";
    Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
    //System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
	System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(Conn);//"Provider=OraOLEDB.Oracle.1;Password=Ma$t3rk3y;Persist Security Info=True;User ID=sysdba;Data Source=BLUEDART");
    System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
    System.Data.DataTable dt = new System.Data.DataTable();
    dataAdapterObj.Fill(dt);
    bool flag = false;
    if (dt.Rows.Count > 0)
    {
        for (int i = 0; i < dt.Rows.Count; i++)
        {
            if ((AccManager.Trim() == _UserId.Trim() || Convert.ToString(dt.Rows[i][0].ToString()).Trim() == _UserId.Trim()) && (objOpp.Status != "Closed - Won" && objOpp.Status.ToUpper() != "LOST" && objOpp.Status.ToUpper() != "DROPPED"))
            {
                lueAssociateProduct.Visible = true;
                grdOppProducts.Enabled = true;
                flag = true;
            }
        }
    }
    else if ((AccManager.Trim() == _UserId.Trim() || Convert.ToString(objOpp.Account.AccountManager.Id).Trim() == _UserId.Trim()) && (objOpp.Status != "Closed - Won" && objOpp.Status.ToUpper() != "LOST" && objOpp.Status.ToUpper() != "DROPPED"))
    {
        lueAssociateProduct.Visible = true;
        grdOppProducts.Enabled = true;
        flag = true;
    }
    if (flag == false)
    {
        lueAssociateProduct.Visible = false;
        grdOppProducts.Enabled = false;
    }
}

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
grdOppProducts.Columns[2].Visible = (RoleSecurityService.HasAccess("Entities/Opportunity/Edit"));
ClientBindingMgr.RegisterBoundControl(lueAssociateProduct);

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (dsOpportunityProducts.SourceObject == null) { dsOpportunityProducts.SourceObject = BindingSource.Current; }
if (dsOpportunityProducts.SourceObject == null) { RegisterBindingsWithClient(dsOpportunityProducts); }
dsOpportunityProducts.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new OpportunityProducts_DetailAdapter(this)); }
}

public class OpportunityProducts_DetailAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IOpportunityProducts_Detail
{
    public OpportunityProducts_DetailAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IDataGridControl _grdOppProducts;
    public  Sage.Platform.Controls.IDataGridControl grdOppProducts
    {
        get { return FindControl(ref _grdOppProducts, "grdOppProducts"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dsOpportunityProducts;
    public  Sage.Platform.Controls.IDataSourceControl dsOpportunityProducts
    {
        get { return FindControl(ref _dsOpportunityProducts, "dsOpportunityProducts"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueAssociateProduct;
    public  Sage.Platform.Controls.ILookupControl lueAssociateProduct
    {
        get { return FindControl(ref _lueAssociateProduct, "lueAssociateProduct"); }
    }

    public  void lueAssociateProduct_OnChange(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("OpportunityProducts_Detail.lueAssociateProduct_OnChange", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
